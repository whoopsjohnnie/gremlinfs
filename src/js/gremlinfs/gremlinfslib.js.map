{"version": 3, "mappings": "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", "sources": ["../../py/gremlinfs/gremlinfslib.py"], "names": ["Exception", "this.path", "path", "GremlinFSError", "GremlinFSObj", "this.setall", "kwargs", "this.get", "name", "_default_", "prefix", "GremlinFSBase", "paths", "GremlinFSPath", "GremlinFSPath.paths", "GremlinFS", "GremlinFS.operations", "GremlinFS.operations().utils", "GremlinFS.operations().utils().splitpath", "node", "root", "GremlinFS.operations().config", "GremlinFSVertex", "GremlinFSVertex.load", "path.length", "elem", "nodes", "node.readFolderEntries", "GremlinFSVertex.fromVs", "GremlinFS.operations().g", "GremlinFS.operations().g().V", "new GremlinFS.operations().g().V().where", "GremlinFS.operations().a", "GremlinFS.operations().a().out", "GremlinFS.operations().a().out(GremlinFS.operations().config(\"in_label\", \"in\")).count", "GremlinFS.operations().a().out(GremlinFS.operations().config(\"in_label\", \"in\")).count().is", "cnode", "cnode.toid", "GremlinFSPath.atpath", "parent", "nodeid", "parent.readFolderEntries", "cnode.get", "vindex", "item", "clazz", "match", "gfsmap", "match.update", "expanded", "match.get", "expanded.length", "GremlinFSPath.pathparent", "GremlinFSPath.pathnode", "GremlinFSUtils", "GremlinFSUtils.found", "GremlinFSPath.path", "debug", "GremlinFS.operations().ro", "GremlinFS.operations().mq", "GremlinFS.operations().mqevent", "event", "this.utils", "this.utils().query", "query", "this.utils().eval", "command", "key", "this.config", "this._node", "this._parent", "this._type", "this._path", "this.node", "node.isFolder", "node.isFile", "node.isLink", "node.has", "this._vertexproperty", "node.edge", "this._vertexedge", "this.isFound", "GremlinFSExistsError", "this.isFile", "GremlinFSIsFileError", "newname", "GremlinFSVertex.infer", "this._name", "newlabel", "GremlinFS.operations().defaultFolderLabel", "GremlinFSVertex.label", "newuuid", "this.parent", "GremlinFSNotExistsError", "newfolder", "GremlinFSVertex.make", "GremlinFSVertex.make(newname, newlabel, newuuid).createFolder", "mode", "this.mqevent", "GremlinFSEvent", "label", "GremlinFS.operations().isFolderLabel", "newfile", "GremlinFSVertex.make(newname, newlabel, newuuid).create", "entries", "gfslist", "entries.extend", "this.root", "root.readFolderEntries", "this.g", "this.g().V", "new this.g().V().where", "GremlinFS.operations().a().out(this.config(\"in_label\")).count", "GremlinFS.operations().a().out(this.config(\"in_label\")).count().is", "node.toid", "entries.append", "entries.tolist", "labels", "new this.g().V().label", "new this.g().V().label().dedup", "this._vertexlabel", "_short_", "parent.get", "new this.g().V(parent.get(\"id\")).inE", "new this.g().V(parent.get(\"id\")).inE(this.config(\"in_label\")).has", "new this.g().V(parent.get(\"id\")).inE(this.config(\"in_label\")).has(\"name\", this.config(\"in_name\")).outV", "new this.g().V(parent.get(\"id\")).inE(this.config(\"in_label\")).has(\"name\", this.config(\"in_name\")).outV().hasLabel", "new this.g().V().hasLabel", "node.keys", "node.get", "new this.g().V(node.get(\"id\")).inE", "new this.g().V(node.get(\"id\")).outE", "this.moveNode", "newmatch", "this.deleteNode", "this.isFolder", "GremlinFSIsFolderError", "data", "node.setProperty", "this.readNode", "size", "offset", "data.length", "this.writeNode", "this.clearNode", "sourcematch", "sourcematch.isFound", "source", "sourcematch.node", "target", "GremlinFSEdge", "GremlinFSEdge.infer", "newlink", "source.createLink", "edgenode", "node.edgenode", "newpath", "this.utils().nodelink", "link", "node.getLink", "node.deleteLink", "this.node().file", "node.render", "this.utils().tobytes", "node.readProperty", "label_config", "node.labelConfig", "writefn", "old", "_new_", "GremlinFSUtils.irepl", "this.utils().tostring", "node.writeProperty", "newmatch.parent", "node.rename", "newmatch._name", "node.move", "oldnode", "oldname", "newnode", "newmatch.node", "newmatch._vertexproperty", "oldnode.readProperty", "newnode.writeProperty", "newdata", "newnode.readProperty", "oldnode.unsetProperty", "node.delete", "node.unsetProperty", "value", "node.getProperty", "parts", "clazz.parse", "obj", "field", "parts.get", "fstype", "compiled", "GremlinFS.operations().utils().recompile", "compiled.search", "label_config.get", "config", "mapid", "mapuuid", "maplabel", "mapname", "inmap", "inmap.get", "encoding", "this.utils().decode", "this.utils().encode", "node.set", "new this.g().V(nodeid).property", "new this.g().V(nodeid).property(name, data).next", "new this.g().V(nodeid).properties", "new this.g().V(nodeid).properties(name).drop", "new this.g().V(nodeid).properties(name).drop().next", "existing", "existing.update", "node.all", "properties", "this.logger", "this.logger.exception", "e", "properties.update", "properties.tomap", "this.getProperty", "this.setProperty", "GremlinFSNode", "id", "matcher", "GremlinFS.operations().utils().rematch", "nodenme", "matcher.group", "nodetpe", "nodelbl", "nodeuid", "uuid", "GremlinFSVertex.parse", "GremlinFSVertex.fromV", "new GremlinFS.operations().g().V().has", "new GremlinFS.operations().g().V().hasLabel", "new GremlinFS.operations().g().V().hasLabel(parts[\"label\"]).has", "node.fromobj", "map", "maps", "nodes.append", "nodes.tolist", "GremlinFSVertex.fromMap", "v", "v.valueMap", "v.valueMap(true).next", "GremlinFSVertex.fromMaps", "vs", "vs.valueMap", "vs.valueMap(true).toList", "edgeid", "ine", "GremlinFSEdge.fromEs", "new this.g().V(node.get(\"id\")).inE(label).has", "new this.g().V(node.get(\"id\")).outE(label).has", "GremlinFSEdge.fromE", "inv", "new this.g().V(node.get(\"id\")).inE(label).has(\"name\", name).inV", "new this.g().V(node.get(\"id\")).inE(label).has(\"name\", name).outV", "new this.g().V(node.get(\"id\")).outE(label).has(\"name\", name).inV", "new this.g().V(node.get(\"id\")).outE(label).has(\"name\", name).outV", "new this.g().V(node.get(\"id\")).inE(label).inV", "new this.g().V(node.get(\"id\")).inE(label).outV", "new this.g().V(node.get(\"id\")).outE(label).inV", "new this.g().V(node.get(\"id\")).outE(label).outV", "new this.g().V(node.get(\"id\")).inE().inV", "new this.g().V(node.get(\"id\")).inE().outV", "new this.g().V(node.get(\"id\")).outE().inV", "new this.g().V(node.get(\"id\")).outE().outV", "this.edgenodes", "this.outbound", "GremlinFS.operations().isFileLabel", "UUID", "owner", "group", "namespace", "pathuuid", "this.utils().genuuid", "pathtime", "this.utils().gentime", "this.g().addV", "newnode.property", "newnode.property(\"name\", name).property", "newnode.property(\"name\", name).property(\"uuid\", pathuuid.toString()).property", "newnode.property(\"name\", name).property(\"uuid\", pathuuid.toString()).property(\"namespace\", namespace).property", "newnode.property(\"name\", name).property(\"uuid\", pathuuid.toString()).property(\"namespace\", namespace).property(\"created\", Number.parseInt(pathtime)).property", "newnode.property(\"name\", name).property(\"uuid\", pathuuid.toString()).property(\"namespace\", namespace).property(\"created\", Number.parseInt(pathtime)).property(\"modified\", Number.parseInt(pathtime)).property", "newnode.property(\"name\", name).property(\"uuid\", pathuuid.toString()).property(\"namespace\", namespace).property(\"created\", Number.parseInt(pathtime)).property(\"modified\", Number.parseInt(pathtime)).property(\"mode\", mode).property", "newnode.property(\"name\", name).property(\"uuid\", pathuuid.toString()).property(\"namespace\", namespace).property(\"created\", Number.parseInt(pathtime)).property(\"modified\", Number.parseInt(pathtime)).property(\"mode\", mode).property(\"owner\", owner).property", "newnode.addE", "newnode.addE(this.config(\"in_label\")).property", "newnode.addE(this.config(\"in_label\")).property(\"name\", this.config(\"in_name\")).property", "newnode.addE(this.config(\"in_label\")).property(\"name\", this.config(\"in_name\")).property(\"uuid\", this.utils().genuuid().toString()).to", "GremlinFS.operations().a().V", "newnode.addE(this.config(\"in_label\")).property(\"name\", this.config(\"in_name\")).property(\"uuid\", this.utils().genuuid().toString()).to(new GremlinFS.operations().a().V(parent.get(\"id\"))).next", "newnode.next", "new this.g().V().has", "new this.g().V(node.get(\"id\")).property", "new this.g().V(node.get(\"id\")).outE(this.config(\"in_label\")).has", "new this.g().V(node.get(\"id\")).outE(this.config(\"in_label\")).has(\"name\", this.config(\"in_name\")).drop", "new this.g().V(node.get(\"id\")).addE", "new this.g().V(node.get(\"id\")).addE(this.config(\"in_label\")).property", "new this.g().V(node.get(\"id\")).addE(this.config(\"in_label\")).property(\"name\", this.config(\"in_name\")).property", "new this.g().V(node.get(\"id\")).addE(this.config(\"in_label\")).property(\"name\", this.config(\"in_name\")).property(\"uuid\", this.utils().genuuid().toString()).to", "new this.g().V(node.get(\"id\")).drop", "new this.g().V(node.get(\"id\")).drop().next", "template", "readfn", "templatenodes", "node.follow", "templatenodes.length", "templatenodes[0].readProperty", "node.hasProperty", "ps", "new GremlinFS.operations().g().V(node.get(\"id\")).emit", "new GremlinFS.operations().g().V(node.get(\"id\")).emit().repeat", "GremlinFS.operations().a().inE", "GremlinFS.operations().a().inE().outV", "new GremlinFS.operations().g().V(node.get(\"id\")).emit().repeat(GremlinFS.operations().a().inE().outV()).until", "GremlinFS.operations().a().inE().count", "GremlinFS.operations().a().inE().count().is", "GremlinFS.operations().a().inE().count().is(0).or", "GremlinFS.operations().a().inE().count().is(0).or().loops", "GremlinFS.operations().a().inE().count().is(0).or().loops().is", "P", "P.gt", "new GremlinFS.operations().g().V(node.get(\"id\")).emit().repeat(GremlinFS.operations().a().inE().outV()).until(GremlinFS.operations().a().inE().count().is(0).or().loops().is(P.gt(10))).path", "new GremlinFS.operations().g().V(node.get(\"id\")).emit().repeat(GremlinFS.operations().a().inE().outV()).until(GremlinFS.operations().a().inE().count().is(0).or().loops().is(P.gt(10))).path().toList", "vs2", "vs2.set", "v.get", "templatectx", "vs2.get", "vs2.get(node.get(\"id\")).all", "templatectxi", "haslabel", "v.objects", "v2id", "v2", "v2.id", "Vertex", "found", "templatectxi.all", "ctemplatectxi", "ctemplatectxi.get", "templatectxi.append", "vs2.get(v2id).all", "Edge", "templatectxi.has", "v2.label", "templatectxi.set", "templatectxi.get", "this.utils().render", "templatectx.tomap", "this.create", "newfolder.get", "new this.g().V(newfolder.get(\"id\")).property", "new this.g().V(newfolder.get(\"id\")).property(\"type\", this.config(\"folder_label\")).property", "new this.g().V(newfolder.get(\"id\")).property(\"type\", this.config(\"folder_label\")).property(\"in_label\", this.config(\"in_label\")).property", "new this.g().V(newfolder.get(\"id\")).property(\"type\", this.config(\"folder_label\")).property(\"in_label\", this.config(\"in_label\")).property(\"in_name\", this.config(\"in_name\")).property", "new this.g().V(newfolder.get(\"id\")).addE", "new this.g().V(newfolder.get(\"id\")).addE(this.config(\"self_label\")).property", "new this.g().V(newfolder.get(\"id\")).addE(this.config(\"self_label\")).property(\"name\", this.config(\"self_name\")).property", "new this.g().V(newfolder.get(\"id\")).addE(this.config(\"self_label\")).property(\"name\", this.config(\"self_name\")).property(\"uuid\", this.utils().genuuid().toString()).to", "newedge", "source.get", "new this.g().V(source.get(\"id\")).addE", "new this.g().V(source.get(\"id\")).addE(label).property", "new this.g().V(source.get(\"id\")).addE(label).property(\"name\", name).property", "new this.g().V(source.get(\"id\")).addE(label).property(\"name\", name).property(\"uuid\", this.utils().genuuid().toString()).to", "target.get", "new this.g().V(source.get(\"id\")).addE(label).property(\"uuid\", this.utils().genuuid().toString()).to", "new this.g().V(node.get(\"id\")).inE(label).has(\"name\", name).drop", "new this.g().V(node.get(\"id\")).outE(label).has(\"name\", name).drop", "new this.g().V(node.get(\"id\")).inE(label).drop", "new this.g().V(node.get(\"id\")).outE(label).drop", "new this.g().V(node.get(\"id\")).outE(this.config(\"in_label\")).inV", "new this.g().V(node.get(\"id\")).outE(this.config(\"in_label\")).inV().valueMap", "new this.g().V(node.get(\"id\")).outE(this.config(\"in_label\")).inV().valueMap(true).next", "_list_", "node.parent", "_list_.append", "parent.parents", "_list_.tolist", "new this.g().V().where(GremlinFS.operations().a().out(this.config(\"in_label\")).count().is(0)).valueMap", "new this.g().V().where(GremlinFS.operations().a().out(this.config(\"in_label\")).count().is(0)).valueMap(true).toList", "new this.g().V(node.get(\"id\")).inE(this.config(\"in_label\")).outV", "new this.g().V(node.get(\"id\")).inE(this.config(\"in_label\")).outV().valueMap", "new this.g().V(node.get(\"id\")).inE(this.config(\"in_label\")).outV().valueMap(true).toList", "this.children", "GremlinFSEdge.parse", "GremlinFS.operations().g().E", "new GremlinFS.operations().g().E().has", "new GremlinFS.operations().g().E().hasLabel", "new GremlinFS.operations().g().E().hasLabel(parts[\"label\"]).has", "GremlinFSEdge.fromMap", "e.valueMap", "e.valueMap(true).next", "GremlinFSEdge.fromMaps", "es", "es.valueMap", "es.valueMap(true).toList", "edge", "this.g().E", "edge.get", "new this.g().E(edge.get(\"id\")).inV", "new this.g().E(edge.get(\"id\")).outV", "new this.g().E(node.get(\"id\")).drop", "new this.g().E(node.get(\"id\")).drop().next", "attr", "edgenodes", "node.inbound", "node.outbound", "attr.startswith", "attr.replace", "edgenodes.length", "ret", "ret.append", "GremlinFSNodeWrapper", "ret.tolist", "dsprefix", "datasources", "datasources.update", "props", "key.startswith", "log", "err", "GremlinFS.operations().eval", "datasources.get", "existing.get", "props.tomap", "this.all", "this.all(prefix).keys", "key.replace", "datasource", "prop", "index", "old.length", "lprefix", "infix", "linfix", "suffix", "lsuffix", "prefix.length", "nodepath", "node.path", "nodename", "this.linkpath", "elems", "path.split", "elems.length", "this.has", "this.get(\"node\").all", "this.get(\"link\").all", "this.get(\"source\").all", "this.get(\"target\").all", "GremlinFSLogger", "GremlinFSLogger.getLogLevel", "GremlinFSConfig", "GremlinFSConfig.defaults", "re", "re.compile", "instance", "GremlinFS.__instance", "this._g", "this._ro", "this._mq", "this._config", "this.mount_point", "mount_point", "this.logger.info", "this.gremlin_host", "gremlin_host", "this.gremlin_port", "gremlin_port", "this.gremlin_username", "gremlin_username", "this.gremlin_password", "gremlin_password", "this.gremlin_url", "this.rabbitmq_host", "rabbitmq_host", "this.rabbitmq_port", "rabbitmq_port", "this.rabbitmq_username", "rabbitmq_username", "this.rabbitmq_password", "rabbitmq_password", "this._utils", "this._config.get", "fsroot", "this.isFolderLabel", "this.defaultFolderLabel"], "sourcesContent": ["# \n# Copyright (c) 2019, 2020, John Grundback\n# All rights reserved.\n# \n\nfrom .gremlinfslog import GremlinFSLogger\nfrom .gremlinfsobj import GremlinFSObj\nfrom .gremlinfsobj import gfslist\nfrom .gremlinfsobj import gfsmap\n\n\n\nclass GremlinFSError(Exception):\n\n    def __init__(self, path = None):\n        self.path = path\n\n\n\nclass GremlinFSExistsError(GremlinFSError):\n\n    def __init__(self, path = None):\n        self.path = path\n\n\n\nclass GremlinFSNotExistsError(GremlinFSError):\n\n    def __init__(self, path = None):\n        self.path = path\n\n\n\nclass GremlinFSIsFileError(GremlinFSError):\n\n    def __init__(self, path = None):\n        self.path = path\n\n\n\nclass GremlinFSIsFolderError(GremlinFSError):\n\n    def __init__(self, path = None):\n        self.path = path\n\n\n\nclass GremlinFSBase(GremlinFSObj):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSBase\")\n\n    def __init__(self, **kwargs):\n\n        # JS jump:\n        # ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n        super().__init__()\n\n        self.setall(kwargs)\n\n    def property(self, name, _default_ = None, prefix = None):\n        return self.get(name, _default_, prefix)\n\n\n\nclass GremlinFSPath(GremlinFSBase):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSPath\")\n\n    @classmethod\n    def paths(self):\n        return {\n            \"root\": {\n                \"type\": \"folder\",\n                \"debug\": False\n            },\n            \"atpath\": {\n                \"type\": None,\n                \"debug\": False\n            },\n            \"vertex_labels\": {\n                \"type\": \"folder\",\n                \"debug\": False\n            },\n            \"vertex_label\": {\n                \"type\": \"file\",\n                \"debug\": False\n            },\n            \"vertexes\": {\n                \"type\": \"folder\",\n                \"debug\": False\n            },\n            \"vertex\": {\n                \"type\": \"folder\",\n                \"debug\": False\n            },\n            \"vertex_properties\": {\n                \"type\": \"folder\",\n                \"debug\": False,\n            },\n            \"vertex_folder_property\": {\n                \"type\": \"folder\",\n                \"debug\": False,\n            },\n            \"vertex_property\": {\n                \"type\": \"file\",\n                \"debug\": False\n            },\n            \"vertex_edges\": {\n                \"type\": \"folder\",\n                \"debug\": False\n            },\n            \"vertex_in_edges\": {\n                \"type\": \"folder\",\n                \"debug\": False\n            },\n            \"vertex_out_edges\": {\n                \"type\": \"folder\",\n                \"debug\": False\n            },\n            \"vertex_edge\": {\n                \"type\": \"link\",\n                \"debug\": False\n            },\n            \"vertex_in_edge\": {\n                \"type\": \"link\",\n                \"debug\": False\n            },\n            \"vertex_out_edge\": {\n                \"type\": \"link\",\n                \"debug\": False\n            },\n            \"create_vertex\": {\n                \"type\": \"file\",\n                \"debug\": False\n            },\n        }\n\n    @classmethod\n    def path(self, path):\n        paths = GremlinFSPath.paths()\n        if paths and path in paths:\n            return paths[path]\n        return None\n\n    @classmethod\n    def expand(self, path):\n        return GremlinFS.operations().utils().splitpath(path)\n\n    @classmethod\n    def atpath(self, path, node = None):\n\n        if not node:\n            root = None\n            if GremlinFS.operations().config(\"fs_root\", None):\n                root = GremlinFSVertex.load(\n                    GremlinFS.operations().config(\"fs_root\", None)\n                )\n            node = root\n\n        if not path:\n            return node\n\n        elif path and len(path) == 0:\n            return node\n\n        elif path and len(path) == 1 and path[0] == \"\":\n            return node\n\n        elem = path[0]\n\n        nodes = None\n        if node:\n            nodes = node.readFolderEntries()\n\n        else:\n            nodes = GremlinFSVertex.fromVs(\n                GremlinFS.operations().g().V().where(\n                    GremlinFS.operations().a().out(\n                        GremlinFS.operations().config(\"in_label\", \"in\")\n                    ).count().is_(0)\n                )\n            )\n\n        if nodes:\n            for cnode in nodes:\n                if cnode.toid(True) == elem:\n                    return GremlinFSPath.atpath(path[1:], cnode)\n\n        return None\n\n    @classmethod\n    def pathnode(self, nodeid, parent, path):\n\n        node = None\n\n        if parent and nodeid:\n            nodes = parent.readFolderEntries()\n            if nodes:\n                for cnode in nodes:\n                    if cnode and cnode.get(\"name\") == nodeid:\n                        node = cnode\n                        break\n\n        elif nodeid:\n            node = GremlinFSVertex.load( nodeid )\n\n        elif path:\n            node = GremlinFSPath.atpath( path )\n\n        return node\n\n    @classmethod\n    def pathparent(self, path = []):\n\n        root = None\n        if GremlinFS.operations().config(\"fs_root\", None):\n            root = GremlinFSVertex.load(\n                GremlinFS.operations().config(\"fs_root\", None)\n            )\n\n        parent = root\n\n        if not path:\n            return parent\n\n        vindex = 0\n        for item in path:\n            if item == GremlinFS.operations().config(\"vertex_folder\", \".V\"):\n                break\n            vindex += 1\n\n        if vindex:\n            if vindex > 0:\n                parent = GremlinFSPath.atpath( path[0:vindex] )\n\n        else:\n            parent = GremlinFSPath.atpath( path )\n\n        return parent\n\n    @classmethod\n    def match(self, path):\n        clazz = self\n\n        match = gfsmap({\n\n            \"path\": None,\n            \"full\": None,\n            \"parent\": None,\n            \"node\": None,\n            \"name\": None,\n\n            \"vertexlabel\": \"vertex\",\n            \"vertexid\": None,\n            \"vertexuuid\": None,\n            \"vertexname\": None,\n            \"vertexproperty\": None,\n            \"vertexedge\": None\n\n        })\n\n        match.update({\n            \"full\": GremlinFS.operations().utils().splitpath(path)\n        })\n        expanded = match.get(\"full\", [])\n\n        if not expanded:\n            match.update({\n                \"path\": \"root\"\n            })\n\n        elif expanded and len(expanded) == 0:\n            match.update({\n                \"path\": \"root\"\n            })\n\n        elif expanded and GremlinFS.operations().config(\"vertex_folder\", \".V\") in expanded:\n\n            vindex = 0\n            for item in expanded:\n                if item == GremlinFS.operations().config(\"vertex_folder\", \".V\"):\n                    break\n                vindex += 1\n\n            if len(expanded) == vindex + 1:\n\n                parent = GremlinFSPath.pathparent(\n                     expanded\n                )\n\n                if parent:\n                    match.update({\n                        \"parent\": parent\n                    })\n\n                match.update({\n                    \"path\": \"vertexes\",\n                })\n\n            elif len(expanded) == vindex + 2:\n\n                parent = GremlinFSPath.pathparent(\n                     expanded\n                )\n\n                if parent:\n                    match.update({\n                        \"parent\": parent\n                    })\n\n                node = GremlinFSPath.pathnode(\n                    expanded[vindex + 1],\n                    match.get(\"parent\", None),\n                    match.get(\"full\", None),\n                )\n\n                if node:\n                    match.update({\n                        \"node\": node\n                    })\n\n                match.update({\n                    \"path\": \"vertex\",\n                    \"vertexid\": GremlinFSUtils.found( expanded[vindex + 1] ),\n                })\n\n            elif len(expanded) == vindex + 3:\n\n                parent = GremlinFSPath.pathparent(\n                     expanded\n                )\n\n                if parent:\n                    match.update({\n                        \"parent\": parent\n                    })\n\n                node = GremlinFSPath.pathnode(\n                    expanded[vindex + 1],\n                    match.get(\"parent\", None),\n                    match.get(\"full\", None),\n                )\n\n                if node:\n                    match.update({\n                        \"node\": node\n                    })\n\n                if expanded[vindex + 2] == GremlinFS.operations().config(\"in_edge_folder\", \"EI\"):\n                    match.update({\n                        \"path\": \"vertex_in_edges\",\n                        \"vertexid\": GremlinFSUtils.found( expanded[vindex + 1] )\n                    })\n\n                elif expanded[vindex + 2] == GremlinFS.operations().config(\"out_edge_folder\", \"EO\"):\n                    match.update({\n                        \"path\": \"vertex_out_edges\",\n                        \"vertexid\": GremlinFSUtils.found( expanded[vindex + 1] )\n                    })\n\n                # else:\n                #     # Note; Unless I throw this here, I am unable to\n                #     # touch files as attributes. I think the _default_\n                #     # here should be to throw GremlinFSNotExistsError\n                #     # unless file/node is actually found\n                #     raise GremlinFSNotExistsError\n                else:\n                    match.update({\n                        \"path\": \"vertex_property\",\n                        \"vertexid\": GremlinFSUtils.found( expanded[vindex + 1] ),\n                        \"vertexproperty\": GremlinFSUtils.found( expanded[vindex + 2] )\n                    })\n\n            elif len(expanded) == vindex + 4:\n\n                parent = GremlinFSPath.pathparent(\n                     expanded\n                )\n\n                if parent:\n                    match.update({\n                        \"parent\": parent\n                    })\n\n                node = GremlinFSPath.pathnode(\n                    expanded[vindex + 1],\n                    match.get(\"parent\", None),\n                    match.get(\"full\", None),\n                )\n\n                if node:\n                    match.update({\n                        \"node\": node\n                    })\n\n                if expanded[vindex + 2] == GremlinFS.operations().config(\"in_edge_folder\", \"EI\"):\n                    match.update({\n                        \"path\": \"vertex_in_edge\",\n                        \"vertexid\": GremlinFSUtils.found( expanded[vindex + 1] ),\n                        \"vertexedge\": GremlinFSUtils.found( expanded[vindex + 3] )\n                    })\n\n                elif expanded[vindex + 2] == GremlinFS.operations().config(\"out_edge_folder\", \"EO\"):\n                    match.update({\n                        \"path\": \"vertex_out_edge\",\n                        \"vertexid\": GremlinFSUtils.found( expanded[vindex + 1] ),\n                        \"vertexedge\": GremlinFSUtils.found( expanded[vindex + 3] )\n                    })\n\n        elif expanded and len(expanded) == 1:\n            match.update({\n                \"path\": \"atpath\",\n                \"name\": expanded[0],\n                \"parent\": None,\n                \"node\": GremlinFSPath.pathnode(\n                    match.get(\"vertexid\", None),\n                    None,\n                    match.get(\"full\", None),\n                )\n            })\n\n        elif expanded and len(expanded) == 2:\n            match.update({\n                \"path\": \"atpath\",\n                \"name\": expanded[1],\n                \"parent\": GremlinFSPath.pathparent([expanded[0]])\n            })\n            match.update({\n                \"node\": GremlinFSPath.pathnode(\n                    match.get(\"vertexid\", None),\n                    match.get(\"parent\", None),\n                    match.get(\"full\", None),\n                )\n            })\n\n        elif expanded and len(expanded) > 2:\n            match.update({\n                \"path\": \"atpath\",\n                \"name\": expanded[-1],\n                \"parent\": GremlinFSPath.pathparent(expanded[0:-1])\n            })\n            match.update({\n                \"node\": GremlinFSPath.pathnode(\n                    match.get(\"vertexid\", None),\n                    match.get(\"parent\", None),\n                    match.get(\"full\", None),\n                )\n            })\n\n        # if match and match.get(\"path\") in GremlinFSPath.paths():\n        #     match.update(\n        #         GremlinFSPath.paths()[clazz.paths()[match.get(\"path\")]]\n        #     )\n\n        match.update(\n            GremlinFSPath.path(match.get(\"path\"))\n        )\n\n        debug = False\n        if match and match.get(\"debug\", False):\n            debug = True\n\n        # if debug:\n        #     clazz.logger.debug(' GremlinFSPath: MATCH: ' + match.get(\"path\"))\n        #     clazz.logger.debug( match )\n\n        return GremlinFSPath(\n\n            type = match.get(\"type\"),\n            debug = debug, # match.get(\"debug\"),\n\n            path = match.get(\"path\"),\n            full = match.get(\"full\"),\n            parent = match.get(\"parent\"),\n            node = match.get(\"node\"),\n            name = match.get(\"name\"),\n\n            vertexlabel = match.get(\"vertexlabel\"),\n            vertexid = match.get(\"vertexid\"),\n            vertexuuid = match.get(\"vertexuuid\"),\n            vertexname = match.get(\"vertexname\"),\n            vertexproperty = match.get(\"vertexproperty\"),\n            vertexedge = match.get(\"vertexedge\")\n\n        )\n\n    def __init__(self, **kwargs):\n\n        # JS jump:\n        # ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n        super().__init__()\n\n        self.setall(kwargs)\n\n    # \n\n    def g(self):\n        return GremlinFS.operations().g()\n\n    def ro(self):\n        return GremlinFS.operations().ro()\n\n    def a(self):\n        return GremlinFS.operations().a()\n\n    def mq(self):\n        return GremlinFS.operations().mq()\n\n    def mqevent(self, event):\n        return GremlinFS.operations().mqevent(event)\n\n    def query(self, query, node = None, _default_ = None):\n        return self.utils().query(query, node, _default_)\n\n    def eval(self, command, node = None, _default_ = None):\n        return self.utils().eval(command, node, _default_)\n\n    def config(self, key = None, _default_ = None):\n        return GremlinFS.operations().config(key, _default_)\n\n    def utils(self):\n        return GremlinFS.operations().utils()\n\n    # \n\n    # JS jump:\n    # UnsupportedSyntaxError: Having both param accumulator and keyword args is unsupported\n    def enter(self, functioname, *args):\n        pass\n\n    # \n\n    def root(self):\n\n        root = None\n        if self.config(\"fs_root\"):\n            root = GremlinFSVertex.load(\n                self.config(\"fs_root\")\n            )\n\n        return root\n\n    def node(self):\n        return self._node\n\n    def parent(self):\n        return self._parent\n\n    # \n\n    def isFolder(self):\n\n        _default_ = False\n        if self._type and self._type == \"folder\":\n            _default_ = True\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            node = self.node()\n            if node and node.isFolder():\n                return True\n            return False\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def isFile(self):\n\n        _default_ = False\n        if self._type and self._type == \"file\":\n            _default_ = True\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            node = self.node()\n            if node and node.isFile():\n                return True\n            return False\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def isLink(self):\n\n        _default_ = False\n        if self._type and self._type == \"link\":\n            _default_ = True\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            node = self.node()\n            if node and node.isLink():\n                return True\n            return False\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def isFound(self):\n\n        _default_ = False\n        if self._type:\n            _default_ = True\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            node = self.node()\n            if node:\n                return True\n            return False\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        elif self._path == \"vertex\":\n            node = self.node()\n            if node:\n                return True\n            return False\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        elif self._path == \"vertex_property\":\n            node = GremlinFSUtils.found( self.node() )\n            if node.has( self._vertexproperty ):\n                return True\n            elif node.edge( self._vertexproperty, False ):\n                return True\n            return False\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        elif self._path == \"vertex_in_edge\":\n            node = GremlinFSUtils.found( self.node() )\n            if node.edge( self._vertexedge, True ):\n                return True\n            return False\n\n        elif self._path == \"vertex_out_edge\":\n            node = GremlinFSUtils.found( self.node() )\n            if node.edge( self._vertexedge, False ):\n                return True\n            return False\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n\n    # \n    # Folder CRUD\n    # \n    # - createFolder\n    # - readFolder\n    # - renameFolder\n    # - deleteFolder\n    # \n\n\n    def createFolder(self, mode = None):\n\n        if self.isFound():\n            raise GremlinFSExistsError(self)\n\n        if self.isFile():\n            raise GremlinFSIsFileError(self)\n\n        _default_ = None\n        if self._type:\n            _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n\n            newname = GremlinFSVertex.infer(\"name\", self._name)\n            newlabel = GremlinFSVertex.infer(\"label\", self._name, GremlinFS.operations().defaultFolderLabel())\n            newlabel = GremlinFSVertex.label(newname, newlabel, \"folder\", GremlinFS.operations().defaultFolderLabel())\n            newuuid = GremlinFSVertex.infer(\"uuid\", self._name)\n            parent = self.parent()\n\n            if not newname:\n                raise GremlinFSNotExistsError(self)\n\n            parent = self.parent()\n            newfolder = GremlinFSVertex.make(\n                newname,\n                newlabel,\n                newuuid\n            ).createFolder(\n                parent,\n                mode\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"create_node\",\n                node = newfolder\n            ))\n\n            return True\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        elif self._path == \"vertex\":\n\n            newname = GremlinFSVertex.infer(\"name\", self._name)\n            newlabel = GremlinFSVertex.infer(\"label\", self._name, \"vertex\")\n            newlabel = GremlinFSVertex.label(newname, newlabel, \"file\", \"vertex\")\n            newuuid = GremlinFSVertex.infer(\"uuid\", self._name)\n            parent = self.parent()\n\n            # Do not create an A vertex in /V/B, unless A is vertex\n            if label != \"vertex\":\n                if label != newlabel:\n                    raise GremlinFSNotExistsError(self)\n\n            if not newname:\n                raise GremlinFSNotExistsError(self)\n\n            if GremlinFS.operations().isFolderLabel(newlabel):\n                newfolder = GremlinFSVertex.make(\n                    newname,\n                    newlabel,\n                    newuuid\n                ).createFolder(\n                    None,\n                    mode\n                )\n\n                self.mqevent(GremlinFSEvent(\n                    event = \"create_node\",\n                    node = newfolder\n                ))\n\n            else:\n                newfile = GremlinFSVertex.make(\n                    newname,\n                    newlabel,\n                    newuuid\n                ).create(\n                    None,\n                    mode\n                )\n\n                self.mqevent(GremlinFSEvent(\n                    event = \"create_node\",\n                    node = newfile\n                ))\n\n            return True\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def readFolder(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        entries = gfslist([])\n\n        if self._path == \"root\":\n            entries.extend([\n                self.config(\"vertex_folder\")\n            ])\n\n            root = self.root()\n\n            nodes = None\n            if root:\n                nodes = root.readFolderEntries()\n\n            else:\n                nodes = GremlinFSVertex.fromVs(\n                    self.g().V().where(\n                        GremlinFS.operations().a().out(\n                            self.config(\"in_label\")\n                        ).count().is_(0)\n                    )\n                )\n\n            if nodes:\n                for node in nodes:\n                    nodeid = node.toid(True)\n                    if nodeid:\n                        entries.append(nodeid)\n\n            return entries.tolist()\n\n        elif self._path == \"atpath\":\n            entries.extend([\n                self.config(\"vertex_folder\")\n            ])\n            parent = self.node()\n            nodes = parent.readFolderEntries()\n            if nodes:\n                for node in nodes:\n                    nodeid = node.toid(True)\n                    if nodeid:\n                        entries.append(nodeid)\n\n            return entries.tolist()\n\n        elif self._path == \"vertex_labels\":\n            labels = self.g().V().label().dedup()\n            if labels:\n                for label in labels:\n                    if label:\n                        # TODO: Fix\n                        # list(entries).append(label.strip().replace(\"\\t\", \"\").replace(\"\\t\", \"\"))\n                        entries.append(label)\n\n            return entries.tolist()\n\n        # elif self._path == \"vertex_label\":\n        #     return entries\n\n        elif self._path == \"vertexes\":\n            label = self._vertexlabel\n            if not label:\n                label = \"vertex\"\n\n            _short_ = False\n\n            parent = self.parent()\n            nodes = None\n\n            if parent:\n                _short_ = True\n                if label == \"vertex\":\n                    nodes = GremlinFSVertex.fromVs(\n                        self.g().V(\n                            parent.get(\"id\")\n                        ).inE(\n                            self.config(\"in_label\")\n                        ).has(\n                            'name', self.config(\"in_name\")\n                        ).outV()\n                    )\n                else:\n                    nodes = GremlinFSVertex.fromVs(\n                        self.g().V(\n                            parent.get(\"id\")\n                        ).inE(\n                            self.config(\"in_label\")\n                        ).has(\n                            'name', self.config(\"in_name\")\n                        ).outV().hasLabel(\n                            label\n                        )\n                    )\n\n            else:\n                if label == \"vertex\":\n                    nodes = GremlinFSVertex.fromVs(\n                        self.g().V()\n                    )\n                else:\n                    nodes = GremlinFSVertex.fromVs(\n                        self.g().V().hasLabel(\n                            label\n                        )\n                    )\n\n            nodes = GremlinFSUtils.found( nodes )\n            for node in nodes:\n                nodeid = node.toid( _short_ )\n                if nodeid:\n                    entries.append( nodeid )\n\n            return entries.tolist()\n\n        elif self._path == \"vertex\":\n            label = self._vertexlabel\n            if not label:\n                label = \"vertex\"\n\n            node = GremlinFSUtils.found( self.node() )\n            entries.extend(node.keys())\n            entries.extend([\n                GremlinFS.operations().config(\"in_edge_folder\", \"EI\"), \n                GremlinFS.operations().config(\"out_edge_folder\", \"EO\"),\n            ])\n\n            return entries.tolist()\n\n        # elif self._path == \"vertex_properties\":\n        #     return entries\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return entries\n\n        # elif self._path == \"vertex_property\":\n        #     return entries\n\n        # elif self._path == \"vertex_edges\":\n        #     return entries\n\n        elif self._path == \"vertex_in_edges\":\n            label = self._vertexlabel\n            if not label:\n                label = \"vertex\"\n\n            node = GremlinFSUtils.found( self.node() )\n            nodes = GremlinFSVertex.fromVs(\n                self.g().V(\n                    node.get(\"id\")\n                ).inE()\n            )\n            if nodes:\n                for cnode in nodes:\n                    if cnode.get(\"label\") and cnode.get(\"name\"):\n                        entries.append( cnode.get(\"name\") + \"@\" + cnode.get(\"label\") )\n                    elif cnode.get(\"label\"):\n                        entries.append( cnode.get(\"label\") )\n\n            return entries.tolist()\n\n        elif self._path == \"vertex_out_edges\":\n            label = self._vertexlabel\n            if not label:\n                label = \"vertex\"\n\n            node = GremlinFSUtils.found( self.node() )\n            nodes = GremlinFSVertex.fromVs(\n                self.g().V(\n                    node.get(\"id\")\n                ).outE()\n            )\n            if nodes:\n                for cnode in nodes:\n                    if cnode.get(\"label\") and cnode.get(\"name\"):\n                        entries.append( cnode.get(\"name\") + \"@\" + cnode.get(\"label\") )\n                    elif cnode.get(\"label\"):\n                        entries.append( cnode.get(\"label\") )\n\n            return entries.tolist()\n\n        # elif self._path == \"vertex_edge\":\n        #     return entries\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return entries\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return entries\n\n        # elif self._path == \"create_vertex\":\n        #     return entries\n\n        return entries\n\n    def renameFolder(self, newmatch):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        return self.moveNode(newmatch)\n\n    def deleteFolder(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        return self.deleteNode()\n\n\n    # \n    # File CRUD\n    # \n    # - createFile\n    # - readFile\n    # - writeFile\n    # - renameFile\n    # - deleteFile\n    # \n\n\n    def createFile(self, mode = None, data = None):\n\n        if self.isFound():\n            raise GremlinFSExistsError(self)\n\n        if self.isFolder():\n            raise GremlinFSIsFolderError(self)\n\n        if not data:\n            data = \"\"\n\n        _default_ = data\n        if self._type:\n            _default_ = data\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n\n            newname = GremlinFSVertex.infer(\"name\", self._name)\n            newlabel = GremlinFSVertex.infer(\"label\", self._name, \"vertex\")\n            newlabel = GremlinFSVertex.label(newname, newlabel, \"file\", \"vertex\")\n            newuuid = GremlinFSVertex.infer(\"uuid\", self._name)\n            parent = self.parent()\n\n            if not newname:\n                raise GremlinFSNotExistsError(self)\n\n            newfile = GremlinFSVertex.make(\n                newname,\n                newlabel,\n                newuuid\n            ).create(\n                parent,\n                mode\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"create_node\",\n                node = newfile\n            ))\n\n            return True\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        elif self._path == \"vertex_property\":\n            node = GremlinFSUtils.found( self.node() )\n            node.setProperty(\n                self._vertexproperty,\n                data\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n            return True\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def readFile(self, size = 0, offset = 0):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        data = self.readNode(size, offset)\n        if data:\n            return data\n        return None\n\n    def readFileLength(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        data = self.readNode()\n        if data:\n            try:\n                return len(data)\n            except Exception as e:\n                pass\n\n        return 0\n\n    def writeFile(self, data, offset = 0):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        return self.writeNode(data, offset)\n\n    def clearFile(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        return self.clearNode()\n\n    def renameFile(self, newmatch):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        return self.moveNode(newmatch)\n\n    def deleteFile(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        return self.deleteNode()\n\n\n    # \n    # Link CRUD\n    # \n    # - createLink\n    # - readLink\n    # - renameLink\n    # - deleteLink\n    # \n\n\n    def createLink(self, sourcematch, mode = None):\n\n        if self.isFound():\n            raise GremlinFSExistsError(self)\n\n        if not sourcematch.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        _default_ = None\n        if self._type:\n            _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            return _default_\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        elif self._path == \"vertex_in_edge\":\n\n            node = self.node()\n\n            # We are the target\n            # To create an inbound link, we shall pass source=source and target=target\n            # To create an outbound link, we shall pass source=target and target=source\n            source = sourcematch.node()\n            target = node\n\n            label = GremlinFSEdge.infer(\"label\", self._vertexedge, None)\n            name = GremlinFSEdge.infer(\"name\", self._vertexedge, None)\n\n            if not label and name:\n                label = name\n                name = None\n\n            # Create link from source to target\n            # Inbound means source=target and target=source\n            newlink = source.createLink(\n                target = target,\n                label = label,\n                name = name,\n                mode = mode\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"create_link\",\n                link = newlink,\n                source = source,\n                target = target\n            ))\n\n            return True\n\n        elif self._path == \"vertex_out_edge\":\n\n            node = self.node()\n\n            # We are the target\n            # To create an inbound link, we shall pass source=sourcematch, target=node\n            # To create an outbound link, we shall pass source=source and target=target\n            source = node\n            target = sourcematch.node()\n\n            label = GremlinFSEdge.infer(\"label\", self._vertexedge, None)\n            name = GremlinFSEdge.infer(\"name\", self._vertexedge, None)\n\n            if not label and name:\n                label = name\n                name = None\n\n            # Create link from source to target\n            # Outbound means source=source and target=target\n            newlink = source.createLink(\n                target = target,\n                label = label,\n                name = name,\n                mode = mode\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"create_link\",\n                link = newlink,\n                source = source,\n                target = target\n            ))\n\n            return True\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_        \n\n    def readLink(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        _default_ = None\n        if self._type:\n            _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            return _default_\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        elif self._path == \"vertex_in_edge\":\n            node = GremlinFSUtils.found( self.node() )\n            edgenode = node.edgenode( self._vertexedge, True, False )\n\n            newpath = self.utils().nodelink(\n                edgenode\n            )\n\n            return newpath\n\n        elif self._path == \"vertex_out_edge\":\n            node = GremlinFSUtils.found( self.node() )\n            edgenode = node.edgenode( self._vertexedge, False, True )\n\n            newpath = self.utils().nodelink(\n                edgenode\n            )\n\n            return newpath\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def deleteLink(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        _default_ = None\n        if self._type:\n            _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            return _default_\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_property\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        elif self._path == \"vertex_in_edge\":\n\n            node = self.node()\n\n            label = GremlinFSEdge.infer(\"label\", self._vertexedge, None)\n            name = GremlinFSEdge.infer(\"name\", self._vertexedge, None)\n\n            if not label and name:\n                label = name\n                name = None\n\n            if label and name:\n                # we are the target, in edge means ...\n                link = node.getLink(\n                    label = label,\n                    name = name,\n                    ine = True\n                )\n\n                node.deleteLink(\n                    label = label,\n                    name = name,\n                    ine = True\n                )\n\n                self.mqevent(GremlinFSEvent(\n                    event = \"delete_link\",\n                    link = link\n                ))\n\n            elif label:\n                # we are the target, in edge means ...\n                link = node.getLink(\n                    label = label,\n                    name = None,\n                    ine = True\n                )\n\n                node.deleteLink(\n                    label = label,\n                    name = None,\n                    ine = True\n                )\n\n                self.mqevent(GremlinFSEvent(\n                    event = \"delete_link\",\n                    link = link\n                ))\n\n            return True\n\n        elif self._path == \"vertex_out_edge\":\n\n            node = self.node()\n\n            label = GremlinFSEdge.infer(\"label\", self._vertexedge, None)\n            name = GremlinFSEdge.infer(\"name\", self._vertexedge, None)\n\n            if not label and name:\n                label = name\n                name = None\n\n            if label and name:\n                # we are the target, out edge means ...\n                link = node.getLink(\n                    label = label,\n                    name = name,\n                    ine = False\n                )\n\n                node.deleteLink(\n                    label = label,\n                    name = name,\n                    ine = False\n                )\n\n                self.mqevent(GremlinFSEvent(\n                    event = \"delete_link\",\n                    link = link\n                ))\n\n            elif label:\n                # we are the target, out edge means ...\n                link = node.getLink(\n                    label = label,\n                    name = None,\n                    ine = False\n                )\n\n                node.deleteLink(\n                    label = label,\n                    name = None,\n                    ine = False\n                )\n\n                self.mqevent(GremlinFSEvent(\n                    event = \"delete_link\",\n                    link = link\n                ))\n\n            return True\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    # \n\n    def readNode(self, size = 0, offset = 0):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        _default_ = None\n        if self._type:\n            _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            node = self.node().file()\n\n            data = node.render()\n\n            if data:\n                data = self.utils().tobytes(data)\n\n            if data and size > 0 and offset > 0:\n                return data[offset:offset + size]\n            elif data and offset > 0:\n                return data[offset:]\n            elif data and size > 0:\n                return data[0:size]\n            else:\n                return data\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        elif self._path == \"vertex_property\":\n            node = GremlinFSUtils.found( self.node() )\n            data = node.readProperty(\n                self._vertexproperty,\n                \"\"\n            )\n\n            data = self.utils().tobytes(data)\n\n            if size > 0 and offset > 0:\n                return data[offset:offset + size]\n            elif offset > 0:\n                return data[offset:]\n            elif size > 0:\n                return data[0:size]\n            else:\n                return data\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def writeNode(self, data, offset = 0):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        _default_ = data\n        if self._type:\n            _default_ = data\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            node = self.node().file()\n\n            label_config = node.labelConfig()\n\n            writefn = None\n\n            old = node.readProperty(\n                self.config(\"data_property\"),\n                None,\n                \"base64\"\n            )\n\n            old = self.utils().tobytes(old)\n\n            _new_ = GremlinFSUtils.irepl(old, data, offset)\n\n            _new_ = self.utils().tostring(_new_)\n\n            node.writeProperty(\n                self.config(\"data_property\"),\n                _new_,\n                \"base64\"\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n            try:\n\n                if label_config and \"writefn\" in label_config:\n                    writefn = label_config[\"writefn\"]\n\n            except Exception as e:\n                pass\n\n            try:\n\n                if writefn:\n\n                    writefn(\n                        node = node,\n                        data = data\n                    )\n\n            except Exception as e:\n                pass\n\n            return data\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        elif self._path == \"vertex_property\":\n            node = GremlinFSUtils.found( self.node() )\n\n            old = node.readProperty(\n                self._vertexproperty,\n                None\n            )\n\n            old = self.utils().tobytes(old)\n\n            _new_ = GremlinFSUtils.irepl(old, data, offset)\n\n            _new_ = self.utils().tostring(_new_)\n\n            node.writeProperty(\n                self._vertexproperty,\n                _new_\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n            return data\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def clearNode(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n            node = self.node().file()\n\n            node.writeProperty(\n                self.config(\"data_property\"),\n                \"\"\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n            return None\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        elif self._path == \"vertex_property\":\n            node = GremlinFSUtils.found( self.node() )\n\n            node.writeProperty(\n                self._vertexproperty,\n                \"\"\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n            return None\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def moveNode(self, newmatch):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        # if newmatch.isFound():\n        #     raise GremlinFSExistsError(self)\n\n        _default_ = None\n        if self._type:\n            _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n\n            node = GremlinFSUtils.found(self.node())\n            parent = newmatch.parent()\n\n            node.rename(newmatch._name)\n            node.move(parent)\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n            return True\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        elif self._path == \"vertex_property\":\n\n            oldnode = GremlinFSUtils.found( self.node() )\n            oldname = self._vertexproperty\n\n            newnode = newmatch.node()\n            newname = newmatch._vertexproperty\n\n            data = \"\"\n\n            data = oldnode.readProperty(\n                oldname,\n                \"\"\n            )\n\n            newnode.writeProperty(\n                newname,\n                data\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = newnode\n            ))\n\n            newdata = newnode.readProperty(\n                newname,\n                \"\"\n            )\n\n            if newdata == data:\n\n                oldnode.unsetProperty(\n                    oldname\n                )\n\n                self.mqevent(GremlinFSEvent(\n                    event = \"update_node\",\n                    node = oldnode\n                ))\n\n            return True\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def deleteNode(self):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        _default_ = None\n        if self._type:\n            _default_ = None\n\n        # if self._path == \"root\":\n        #     return _default_\n\n        # el\n        if self._path == \"atpath\":\n\n            node = GremlinFSUtils.found(self.node())\n            node.delete()\n\n            self.mqevent(GremlinFSEvent(\n                event = \"delete_node\",\n                node = node\n            ))\n\n            return True\n\n        # elif self._path == \"vertex_labels\":\n        #     return _default_\n\n        # elif self._path == \"vertex_label\":\n        #     return _default_\n\n        # elif self._path == \"vertexes\":\n        #     return _default_\n\n        # elif self._path == \"vertex\":\n        #     return _default_\n\n        # elif self._path == \"vertex_properties\":\n        #     return _default_\n\n        # elif self._path == \"vertex_folder_property\":\n        #     return _default_\n\n        elif self._path == \"vertex_property\":\n            # label = self._vertexlabel\n            node = GremlinFSUtils.found( self.node() )\n            node.unsetProperty(\n                self._vertexproperty\n            )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n            return True\n\n        # elif self._path == \"vertex_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edges\":\n        #     return _default_\n\n        # elif self._path == \"vertex_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_in_edge\":\n        #     return _default_\n\n        # elif self._path == \"vertex_out_edge\":\n        #     return _default_\n\n        # elif self._path == \"create_vertex\":\n        #     return _default_\n\n        return _default_\n\n    def setProperty(self, key, value):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        if self._path == \"atpath\":\n            node = self.node()\n            if node:\n                node.setProperty(\n                    key,\n                    value\n                )\n\n            self.mqevent(GremlinFSEvent(\n                event = \"update_node\",\n                node = node\n            ))\n\n        return True\n\n    def getProperty(self, key, _default_ = None):\n\n        if not self.isFound():\n            raise GremlinFSNotExistsError(self)\n\n        if self._path == \"atpath\":\n            node = self.node()\n            if node:\n                return node.getProperty(\n                    key,\n                    _default_\n            )\n\n        return _default_\n\n\n\nclass GremlinFSNode(GremlinFSBase):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSNode\")\n\n    @classmethod\n    def parse(self, id):\n        return None\n\n    @classmethod\n    def infer(self, field, obj, _default_ = None):\n        clazz = self\n        parts = clazz.parse( obj )\n        if not field in parts:\n            return _default_\n        return parts.get(field, _default_)\n\n    @classmethod\n    def label(self, name, label, fstype = \"file\", _default_ = \"vertex\"):\n        if not name:\n            return _default_\n        if not label:\n            return _default_\n        for label_config in GremlinFS.operations().config(\"labels\", []):\n            if \"type\" in label_config and label_config[\"type\"] == fstype:\n                compiled = None\n                if \"compiled\" in label_config:\n                    compiled = label_config[\"compiled\"]\n                else:\n                    compiled = GremlinFS.operations().utils().recompile(label_config[\"pattern\"])\n\n                if compiled:\n                    if compiled.search(name):\n                        label = label_config.get(\"label\", _default_)\n                        break\n\n        return label\n\n#     @classmethod\n#     def fromV(self, v):\n#         clazz = self\n#         return clazz.fromMap(\n#             v.valueMap(True).next()\n#         )\n#  \n#     @classmethod\n#     def fromVs(self, vs):\n#         clazz = self\n#         return clazz.fromMaps(\n#             vs.valueMap(True).toList()\n#         )\n\n    def __init__(self, **kwargs):\n\n        # JS jump:\n        # ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n        super().__init__()\n\n        self.setall(kwargs)\n\n    # \n\n    def g(self):\n        return GremlinFS.operations().g()\n\n    def ro(self):\n        return GremlinFS.operations().ro()\n\n    def a(self):\n        return GremlinFS.operations().a()\n\n    def mq(self):\n        return GremlinFS.operations().mq()\n\n    def mqevent(self, event):\n        return GremlinFS.operations().mqevent(event)\n\n    def query(self, query, node = None, _default_ = None):\n        return self.utils().query(query, node, _default_)\n\n    def eval(self, command, node = None, _default_ = None):\n        return self.utils().eval(command, node, _default_)\n\n    def config(self, key = None, _default_ = None):\n        return GremlinFS.operations().config(key, _default_)\n\n    def utils(self):\n        return GremlinFS.operations().utils()\n\n    def labelConfig(self):\n        node = self\n        config = None\n\n        for label_config in GremlinFS.operations().config(\"labels\", []):\n            if \"label\" in label_config and label_config[\"label\"] == node.get('label', None):\n                config = label_config\n\n        return config\n\n    # \n\n    def toid(self, _short_ = False):\n        node = self\n        mapid = node.get('id', None)\n        mapuuid = node.get('uuid', None)\n        maplabel = node.get('label', None)\n        mapname = node.get('name', None)\n\n        # TODO: Fix\n        # if mapname:\n        #     mapname = mapname.strip().replace(\"\\t\", \"\").replace(\"\\t\", \"\")\n\n        if mapname and mapuuid and maplabel and not _short_:\n            if maplabel == \"vertex\":\n                return mapname + \"@\" + mapuuid\n            else:\n                return mapname + \"@\" + maplabel + \"@\" + mapuuid\n\n        elif mapname and maplabel and _short_:\n            return mapname\n\n        elif mapname and maplabel:\n            return mapname\n\n        elif mapname:\n            return mapname\n\n        elif mapuuid:\n            return mapuuid\n\n    def matches(self, inmap):\n        node = self\n        mapid = inmap.get('id', None)\n        mapuuid = inmap.get('uuid', None)\n        maplabel = inmap.get('label', None)\n        mapname = inmap.get('name', None)\n\n        if mapname and mapname == node.get('name', None) and \\\n            maplabel and maplabel == node.get('label', None):\n            return True\n\n        return False\n\n    def hasProperty(self, name, prefix = None):\n\n        node = self\n\n        if not node:\n            return False\n\n        data = node.has(name, prefix)\n        if not data:\n            return False\n\n        return True\n\n    def getProperty(self, name, _default_ = None, encoding = None, prefix = None):\n\n        node = self\n\n        if not node:\n            return _default_\n\n        data = node.get(name, None, prefix)\n        if not data:\n            return _default_\n\n        if encoding:\n            data = self.utils().tobytes(data)\n            data = self.utils().decode(data, encoding)\n            data = self.utils().tostring(data)\n\n        return data\n\n    def setProperty(self, name, data = None, encoding = None, prefix = None):\n\n        node = self\n\n        if not node:\n            return\n\n        if not data:\n            data = \"\"\n\n        nodeid = node.get(\"id\")\n\n        if encoding:\n            data = self.utils().tobytes(data)\n            data = self.utils().encode(data, encoding)\n            data = self.utils().tostring(data)\n\n        node.set(name, data, prefix)\n\n        if prefix:\n            name = prefix + \".\" + name\n\n        # GremlinFSVertex.fromV(\n        self.g().V(\n            nodeid\n        ).property(\n            name, data\n        ).next()\n        # )\n\n        return data\n\n    def unsetProperty(self, name, prefix = None):\n\n        node = self\n\n        if not node:\n            return\n\n        nodeid = node.get(\"id\")\n\n        node.set(name, None, prefix)\n\n        if prefix:\n            name = prefix + \".\" + name\n\n        # Having issues with exception throwing, even though deletion works\n        try:\n            # GremlinFSVertex.fromV(\n            self.g().V(\n                nodeid\n            ).properties(\n                name\n            ).drop().next()\n            # )\n        except Exception as e:\n            pass\n\n    def setProperties(self, properties, prefix = None):\n\n        node = self\n\n        existing = gfsmap({})\n\n        existing.update(node.all(prefix))\n\n        if existing:\n            for key in dict(existing):\n                value = existing[key]\n                if not key in properties:\n                    node.unsetProperty(\n                        key,\n                        prefix\n                    )\n\n        if properties:\n            for key in dict(properties):\n                value = properties[key]\n                try:\n                    node.setProperty(\n                        key,\n                        value,\n                        None,\n                        prefix\n                    )\n                except Exception as e:\n                    self.logger.exception(' GremlinFS: setProperties exception ', e)\n\n    def getProperties(self, prefix = None):\n\n        node = self\n\n        properties = gfsmap({})\n        properties.update(node.all(prefix))\n\n        return properties.tomap()\n\n    def readProperty(self, name, _default_ = None, encoding = None, prefix = None):\n        return self.getProperty(name, _default_, encoding, prefix)\n\n    def writeProperty(self, name, data, encoding = None, prefix = None):\n        return self.setProperty(name, data, encoding, prefix)\n\n    def invoke(self, handler, event, chain = [], data = {}):\n        pass\n\n    def event(self, event, chain = [], data = {}, propagate = True):\n        pass\n\n\n\nclass GremlinFSVertex(GremlinFSNode):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSVertex\")\n\n    @classmethod\n    def parse(self, id):\n\n        if not id:\n            return {}\n\n        # name.type@label@uuid\n        # ^(.+)\\.(.+)\\@(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\n        matcher = GremlinFS.operations().utils().rematch(\n            r\"^(.+)\\.(.+)\\@(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\",\n            id\n        )\n        if matcher:\n            nodenme = matcher.group(1)\n            nodetpe = matcher.group(2)\n            nodelbl = matcher.group(3)\n            nodeuid = matcher.group(4)\n            return {\n                \"name\": nodenme + \".\" + nodetpe,\n                \"type\": nodetpe,\n                \"label\": nodelbl,\n                \"uuid\": nodeuid\n            }\n\n        # name@label@uuid\n        # ^(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\n        matcher = GremlinFS.operations().utils().rematch(\n            r\"^(.+)\\@(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\",\n            id\n        )\n        if matcher:\n            nodenme = matcher.group(1)\n            nodelbl = matcher.group(2)\n            nodeuid = matcher.group(3)\n            return {\n                \"name\": nodenme,\n                \"label\": nodelbl,\n                \"uuid\": nodeuid\n            }\n\n        # name.type@uuid\n        # ^(.+)\\.(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\n        matcher = GremlinFS.operations().utils().rematch(\n            r\"^(.+)\\.(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\",\n            id\n        )\n        if matcher:\n            nodenme = matcher.group(1)\n            nodetpe = matcher.group(2)\n            nodeuid = matcher.group(3)\n            return {\n                \"name\": nodenme + \".\" + nodetpe,\n                \"type\": nodetpe,\n                \"uuid\": nodeuid\n            }\n\n        # name@uuid\n        # ^(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\n        matcher = GremlinFS.operations().utils().rematch(\n            r\"^(.+)\\@([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\",\n            id\n        )\n        if matcher:\n            nodenme = matcher.group(1)\n            nodeuid = matcher.group(2)\n            return {\n                \"name\": nodenme,\n                \"uuid\": nodeuid\n            }\n\n        # name.type\n        # ^(.+)\\.(.+)$\n        matcher = GremlinFS.operations().utils().rematch(\n            r\"^(.+)\\.(.+)$\",\n            id\n        )\n        if matcher:\n            nodenme = matcher.group(1)\n            nodetpe = matcher.group(2)\n            return {\n                \"name\": nodenme + \".\" + nodetpe,\n                \"type\": nodetpe\n            }\n\n        # uuid\n        # ([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})\n        matcher = GremlinFS.operations().utils().rematch(\n            r\"^([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})$\",\n            id\n        )\n        if matcher:\n            nodeuid = matcher.group(1)\n            return {\n                \"uuid\": nodeuid\n            }\n\n        # Default to name\n        return {\n            \"name\": id\n        }\n\n    @classmethod\n    def make(self, name, label, uuid = None):\n        return GremlinFSVertex(name = name, label = label, uuid = uuid)\n\n    @classmethod\n    def load(self, id):\n        clazz = self\n\n        parts = GremlinFSVertex.parse(id)\n        if parts and \\\n            \"uuid\" in parts and \\\n            \"name\" in parts and \\\n            \"label\" in parts:\n            try:\n                if parts[\"label\"] == \"vertex\":\n                    return GremlinFSVertex.fromV(\n                        GremlinFS.operations().g().V().has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n                else:\n                    return GremlinFSVertex.fromV(\n                        GremlinFS.operations().g().V().hasLabel(\n                            parts[\"label\"]\n                        ).has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: node from path ID exception ', e)\n                return None\n\n        elif parts and \\\n            \"uuid\" in parts and \\\n            \"label\" in parts:\n            try:\n                if parts[\"label\"] == \"vertex\":\n                    return GremlinFSVertex.fromV(\n                        GremlinFS.operations().g().V().has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n                else:\n                    return GremlinFSVertex.fromV(\n                        GremlinFS.operations().g().V().hasLabel(\n                            parts[\"label\"]\n                        ).has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: node from path ID exception ', e)\n                return None\n\n        elif parts and \\\n            \"uuid\" in parts:\n            try:\n                return GremlinFSVertex.fromV(\n                    GremlinFS.operations().g().V().has(\n                        \"uuid\", parts[\"uuid\"]\n                    )\n                )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: node from path ID exception ', e)\n                return None\n\n        # Fallback try as straigt up DB id\n        # OrientDB doesn't like invalid ID queries?\n        elif id and \":\" in id:\n            try:\n                return GremlinFSVertex.fromV(\n                    GremlinFS.operations().g().V(\n                        id\n                    )\n                )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: node from path ID exception ', e)\n                return None\n\n        return None\n\n    @classmethod\n    def fromMap(self, map):\n\n        # JS jump:\n        # UnsupportedSyntaxError: '**kwargs' syntax isn't supported\n        # return clazz(**vals)\n        node = GremlinFSVertex()\n        node.fromobj(map)\n\n        return node\n\n    @classmethod\n    def fromMaps(self, maps):\n        # clazz = self\n        nodes = gfslist([])\n\n        for map in maps:\n\n            # JS jump:\n            # UnsupportedSyntaxError: '**kwargs' syntax isn't supported\n            # list(nodes).append(clazz(**vals))\n            node = GremlinFSVertex()\n            node.fromobj(map)\n\n            # list(nodes).append(node)\n            nodes.append(node)\n\n        return nodes.tolist()\n\n    @classmethod\n    def fromV(self, v):\n        clazz = self\n        return GremlinFSVertex.fromMap(\n            v.valueMap(True).next()\n        )\n\n    @classmethod\n    def fromVs(self, vs):\n        clazz = self\n        return GremlinFSVertex.fromMaps(\n            vs.valueMap(True).toList()\n        )\n\n    def edges(self, edgeid = None, ine = True):\n\n        node = self\n\n        label = GremlinFSEdge.infer(\"label\", edgeid, None)\n        name = GremlinFSEdge.infer(\"name\", edgeid, None)\n\n        if not label and name:\n            label = name\n            name = None\n\n        if node and label and name:\n\n            try:\n\n                if ine:\n                    return GremlinFSEdge.fromEs(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        ).has(\n                            \"name\", name\n                        )\n                    )\n                else:\n                    return GremlinFSEdge.fromEs(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        ).has(\n                            \"name\", name\n                        )\n                    )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif node and label:\n\n            try:\n\n                if ine:\n                    return GremlinFSEdge.fromEs(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        )\n                    )\n                else:\n                    return GremlinFSEdge.fromEs(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        )\n                    )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif node:\n\n            try:\n\n                if ine:\n                    return GremlinFSEdge.fromEs(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE()\n                    )\n                else:\n                    return GremlinFSEdge.fromEs(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE()\n                    )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n    def edge(self, edgeid, ine = True):\n\n        node = self\n\n        label = GremlinFSEdge.infer(\"label\", edgeid, None)\n        name = GremlinFSEdge.infer(\"name\", edgeid, None)\n\n        if not label and name:\n            label = name\n            name = None\n\n        if node and label and name:\n\n            try:\n\n                if ine:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        ).has(\n                            \"name\", name\n                        )\n                    )\n                else:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        ).has(\n                            \"name\", name\n                        )\n                    )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif node and label:\n\n            try:\n\n                if ine:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        )\n                    )\n                else:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        )\n                    )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        return None\n\n    def edgenodes(self, edgeid = None, ine = True, inv = True):\n\n        node = self\n\n        label = GremlinFSEdge.infer(\"label\", edgeid, None)\n        name = GremlinFSEdge.infer(\"name\", edgeid, None)\n\n        if not label and name:\n            label = name\n            name = None\n\n        if node and label and name:\n\n            try:\n\n                if ine:\n                    if inv:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).outV()\n                        )\n\n                else:\n                    if inv:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).outV()\n                        )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif node and label:\n\n            try:\n\n                if ine:\n                    if inv:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).outV()\n                        )\n\n                else:\n                    if inv:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).outV()\n                        )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif node:\n\n            try:\n\n                if ine:\n                    if inv:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE().inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE().outV()\n                        )\n\n                else:\n                    if inv:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE().inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromVs(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE().outV()\n                        )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n    def edgenode(self, edgeid, ine = True, inv = True):\n\n        node = self\n\n        label = GremlinFSEdge.infer(\"label\", edgeid, None)\n        name = GremlinFSEdge.infer(\"name\", edgeid, None)\n\n        if not label and name:\n            label = name\n            name = None\n\n        if node and label and name:\n\n            try:\n\n                if ine:\n                    if inv:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).outV()\n                        )\n\n                else:\n                    if inv:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).has(\n                                \"name\", name\n                            ).outV()\n                        )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif node and label:\n\n            try:\n\n                if ine:\n                    if inv:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).inE(\n                                label\n                            ).outV()\n                        )\n\n                else:\n                    if inv:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).inV()\n                        )\n\n                    else:\n                        return GremlinFSVertex.fromV(\n                            self.g().V(\n                                node.get(\"id\")\n                            ).outE(\n                                label\n                            ).outV()\n                        )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n    def inbound(self, edgeid = None):\n        nodes = self.edgenodes(edgeid, True, False)\n        if not nodes:\n            return []\n        return nodes        \n\n    def outbound(self, edgeid = None):\n        nodes = self.edgenodes(edgeid, False, True)\n        if not nodes:\n            return []\n        return nodes \n\n    def follow(self, edgeid):\n        return self.outbound(edgeid)\n\n    # \n\n    def isFolder(self):\n\n        node = self\n\n        if not node:\n            return False\n\n        if not GremlinFS.operations().isFolderLabel(node.get(\"label\")):\n            return False\n\n        return True\n\n    def folder(self):\n\n        node = self\n\n        if not node:\n            raise GremlinFSNotExistsError(self)\n        if not self.isFolder():\n            raise GremlinFSNotExistsError(self)\n        return node\n\n    def isFile(self):\n\n        node = self\n\n        if not node:\n            return False\n\n        if not GremlinFS.operations().isFileLabel(node.get(\"label\")):\n            return False\n\n        return True\n\n    def file(self):\n\n        node = self\n\n        if not node:\n            raise GremlinFSNotExistsError(self)\n        if self.isFolder():\n            raise GremlinFSIsFolderError(self)\n        elif not self.isFile():\n            raise GremlinFSNotExistsError(self)\n        return node\n\n    def create(self, parent = None, mode = None, owner = None, group = None, namespace = None):\n\n        node = self\n\n        UUID = node.get('uuid', None)\n        label = node.get('label', None)\n        name = node.get('name', None)\n\n        if not name:\n            return None\n\n        if not mode:\n            mode = GremlinFS.operations().config(\"default_mode\", 0o644)\n\n        if not owner:\n            owner = GremlinFS.operations().config(\"default_uid\", 0)\n\n        if not group:\n            group = GremlinFS.operations().config(\"default_gid\", 0)\n\n        if not namespace:\n            namespace = GremlinFS.operations().config(\"fs_ns\")\n\n        newnode = None\n\n        try:\n\n            pathuuid = self.utils().genuuid(UUID)\n            pathtime = self.utils().gentime()\n\n            # txn = self.graph().tx()\n\n            newnode = None\n            if label:\n                newnode = self.g().addV(\n                    label\n                )\n            else:\n                newnode = self.g().addV()\n\n            newnode.property(\n                'name', name\n            ).property(\n                'uuid', str(pathuuid)\n            ).property(\n                'namespace', namespace\n            ).property(\n                'created', int(pathtime)\n            ).property(\n                'modified', int(pathtime)\n            ).property(\n                'mode', mode\n            ).property(\n                'owner', owner\n            ).property(\n                'group', group\n            )\n\n            if parent:\n                newnode.addE(\n                    self.config(\"in_label\")\n                ).property(\n                    'name', self.config(\"in_name\")\n                ).property(\n                    'uuid', str(self.utils().genuuid())\n                ).to(\n                    GremlinFS.operations().a().V(\n                        parent.get(\"id\")\n                    )\n                ).next()\n            else:\n                newnode.next()\n\n            newnode = GremlinFSVertex.fromV(\n                self.g().V().has(\n                    'uuid', str(pathuuid)\n                )\n            )\n\n            # self.graph().tx().commit()\n\n        except Exception as e:\n            self.logger.exception(' GremlinFS: create exception ', e)\n            return None\n\n        return newnode\n\n    def rename(self, name):\n\n        node = self\n\n        if not node:\n            return None\n\n        # if not name:\n        #     return None\n\n        newnode = None\n\n        if name:\n\n            try:\n\n                newnode = GremlinFSVertex.fromV(\n                    self.g().V(\n                        node.get(\"id\")\n                    ).property(\n                        'name', name\n                    )\n                )\n\n            except Exception as e:\n                self.logger.exception(' GremlinFS: rename exception ', e)\n                return None\n\n        try:\n\n            newnode = GremlinFSVertex.fromV(\n                self.g().V(\n                    node.get(\"id\")\n                )\n            )\n\n        except Exception as e:\n            self.logger.exception(' GremlinFS: rename exception ', e)\n            return None\n\n        return newnode\n\n    def move(self, parent = None):\n\n        node = self\n\n        if not node:\n            return None\n\n        # if not name:\n        #     return None\n\n        newnode = None\n\n        # drop() on edges often/always? throw exceptions?\n        try:\n\n            newnode = GremlinFSVertex.fromV(\n                self.g().V(\n                    node.get(\"id\")\n                ).outE(\n                    self.config(\"in_label\")\n                ).has(\n                    'name', self.config(\"in_name\")\n                ).drop()\n            )\n\n        except Exception as e:\n            pass\n\n        if parent:\n\n            try:\n\n                newnode = GremlinFSVertex.fromV(\n                    self.g().V(\n                        node.get(\"id\")\n                    ).addE(\n                        self.config(\"in_label\")\n                    ).property(\n                        'name', self.config(\"in_name\")\n                    ).property(\n                        'uuid', str(self.utils().genuuid())\n                    ).to(\n                        GremlinFS.operations().a().V(\n                            parent.get(\"id\")\n                        )\n                    )\n                )\n\n            except Exception as e:\n                self.logger.exception(' GremlinFS: move exception ', e)\n                return None\n\n        try:\n\n            newnode = GremlinFSVertex.fromV(\n                self.g().V(\n                    node.get(\"id\")\n                )\n            )\n\n        except Exception as e:\n            self.logger.exception(' GremlinFS: move exception ', e)\n            return None\n\n        return newnode\n\n    def delete(self):\n\n        node = self\n\n        if not node:\n            return None\n\n        try:\n\n            self.g().V(\n                node.get(\"id\")\n            ).drop().next()\n\n        except Exception as e:\n            # self.logger.exception(' GremlinFS: delete exception ', e)\n            return False\n\n        return True\n\n    def render(self):\n\n        node = self\n\n        data = \"\"\n\n        label_config = node.labelConfig()\n\n        template = None\n        readfn = None\n\n        data = node.readProperty(\n            self.config(\"data_property\"),\n            \"\",\n            \"base64\"\n        )\n\n        try:\n\n            templatenodes = node.follow(self.config(\"template_label\"))\n            if templatenodes and len(templatenodes) >= 1:\n                template = templatenodes[0].readProperty(\n                    self.config(\"data_property\"),\n                    \"\",\n                    \"base64\"\n                )\n\n            elif node.hasProperty(self.config(\"template_property\")):\n                template = node.getProperty(\n                    self.config(\"template_property\"),\n                    \"\"\n                )\n\n            elif label_config and \"template\" in label_config:\n                template = label_config[\"template\"]\n\n            elif label_config and \"readfn\" in label_config:\n                readfn = label_config[\"readfn\"]\n\n        except Exception as e:\n            self.logger.exception(' GremlinFS: readNode template exception ', e)\n\n        try:\n\n            ps = GremlinFS.operations().g().V( node.get('id') ).emit().repeat(\n                GremlinFS.operations().a().inE().outV()\n            ).until(\n                GremlinFS.operations().a().inE().count().is_(0).or_().loops().is_(P.gt(10))\n            ).path().toList()\n\n            vs = GremlinFSVertex.fromVs(GremlinFS.operations().g().V( node.get('id') ).emit().repeat(\n                GremlinFS.operations().a().inE().outV()\n            ).until(\n                GremlinFS.operations().a().inE().count().is_(0).or_().loops().is_(P.gt(10))\n            ))\n\n            vs2 = gfsmap({})\n            for v in vs:\n                vs2.set(v.get('id'), v)\n\n            templatectx = gfsmap(vs2.get(node.get('id')).all())\n            templatectxi = templatectx\n\n            for v in ps:\n                templatectxi = templatectx\n                haslabel = False\n                for v2 in v.objects:\n                    v2id = (v2.id)['@value']\n                    if isinstance(v2, Vertex):\n                        if haslabel:\n                            found = None\n                            for ctemplatectxi in templatectxi.all():\n                                if ctemplatectxi.get('id') == v2id:\n                                    found = ctemplatectxi\n\n                            if found:\n                                templatectxi = found\n\n                            else:\n                                templatectxi.append(gfsmap(vs2.get(v2id).all()))\n                                templatectxi = templatectxi.all()[-1]\n\n                    elif isinstance(v2, Edge):\n                        haslabel = True\n                        if templatectxi.has(v2.label):\n                            pass\n                        else:\n                            templatectxi.set(v2.label, gfslist([]))\n\n                        templatectxi = templatectxi.get(v2.label)\n\n            if template:\n\n                data = self.utils().render(\n                    template,\n                    templatectx.tomap()\n                )\n\n            elif readfn:\n\n                data = readfn(\n                    node,\n                    templatectx.tomap(),\n                    data\n                )\n\n        except Exception as e:\n            self.logger.exception(' GremlinFS: readNode render exception ', e)\n\n        return data\n\n    def createFolder(self, parent = None, mode = None, owner = None, group = None, namespace = None):\n\n        node = self\n\n        UUID = node.get('uuid', None)\n        label = node.get('label', None)\n        name = node.get('name', None)\n\n        if not name:\n            return None\n\n        if not label:\n            label = GremlinFS.operations().defaultFolderLabel()\n\n        if not mode:\n            mode = GremlinFS.operations().config(\"default_mode\", 0o644)\n\n        if not owner:\n            owner = GremlinFS.operations().config(\"default_uid\", 0)\n\n        if not group:\n            group = GremlinFS.operations().config(\"default_gid\", 0)\n\n        if not namespace:\n            namespace = GremlinFS.operations().config(\"fs_ns\")\n\n        newfolder = self.create(parent, mode, owner, group, namespace)\n\n        try:\n\n            # txn = self.graph().tx()\n\n            GremlinFSVertex.fromV(\n                self.g().V(\n                    newfolder.get(\"id\")\n                ).property(\n                    'type', self.config(\"folder_label\")\n                ).property(\n                    'in_label', self.config(\"in_label\")\n                ).property(\n                    'in_name', self.config(\"in_name\")\n                ).property(\n                    'query', \"g.V('\" + str(newfolder.get(\"id\")) + \"').has('uuid', '\" + str(newfolder.get(\"uuid\")) + \"').has('type', '\" + 'group' + \"').inE('\" + self.config(\"in_label\") + \"').outV()\"\n                )\n            )\n\n            GremlinFSVertex.fromV(\n                self.g().V(\n                    newfolder.get(\"id\")\n                ).addE(\n                    self.config(\"self_label\")\n                ).property(\n                    'name', self.config(\"self_name\")\n                ).property(\n                    'uuid', str(self.utils().genuuid())\n                ).to(\n                    GremlinFS.operations().a().V(\n                        newfolder.get(\"id\")\n                    )\n                )\n            )\n\n            # self.graph().tx().commit()\n\n        except Exception as e:\n            self.logger.exception(' GremlinFS: createFolder exception ', e)\n            return None\n\n        return newfolder\n\n    def createLink(self, target, label, name = None, mode = None, owner = None, group = None):\n\n        source = self\n\n        if not source:\n            return None\n\n        if not target:\n            return None\n\n        if not label:\n            return None\n\n        if not mode:\n            mode = GremlinFS.operations().config(\"default_mode\", 0o644)\n\n        if not owner:\n            owner = GremlinFS.operations().config(\"default_uid\", 0)\n\n        if not group:\n            group = GremlinFS.operations().config(\"default_gid\", 0)\n\n        newedge = None\n\n        try:\n\n            if name:\n\n                newedge = GremlinFSEdge.fromE(\n                    self.g().V(\n                        source.get(\"id\")\n                    ).addE(\n                        label\n                    ).property(\n                        'name', name\n                    ).property(\n                        'uuid', str(self.utils().genuuid())\n                    ).to(\n                        GremlinFS.operations().a().V(\n                            target.get(\"id\")\n                        )\n                    )\n                )\n\n            else:\n\n                newedge = GremlinFSEdge.fromE(\n                    self.g().V(\n                        source.get(\"id\")\n                    ).addE(\n                        label\n                    ).property(\n                        'uuid', str(self.utils().genuuid())\n                    ).to(\n                        GremlinFS.operations().a().V(\n                            target.get(\"id\")\n                        )\n                    )\n                )\n\n        except Exception as e:\n            self.logger.exception(' GremlinFS: createLink exception ', e)\n            return None\n\n        return newedge\n\n    def getLink(self, label, name = None, ine = True):\n\n        node = self\n\n        if not node:\n            return None\n\n        if not label:\n            return None\n\n        try:\n\n            if name:\n\n                if ine:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        ).has(\n                            'name', name\n                        )\n                    )\n\n                else:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        ).has(\n                            'name', name\n                        )\n                    )\n\n            else:\n\n                if ine:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        )\n                    )\n\n                else:\n                    return GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        )\n                    )\n\n        except:\n            pass\n\n        return None\n\n    def deleteLink(self, label, name = None, ine = True):\n\n        node = self\n\n        if not node:\n            return None\n\n        if not label:\n            return None\n\n        newedge = None\n\n        # drop() on edges often/always? throw exceptions?\n        try:\n\n            if name:\n\n                if ine:\n                    newedge = GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        ).has(\n                            'name', name\n                        ).drop()\n                    )\n\n                else:\n                    newedge = GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        ).has(\n                            'name', name\n                        ).drop()\n                    )\n\n            else:\n\n                if ine:\n                    newedge = GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).inE(\n                            label\n                        ).drop()\n                    )\n\n                else:\n                    newedge = GremlinFSEdge.fromE(\n                        self.g().V(\n                            node.get(\"id\")\n                        ).outE(\n                            label\n                        ).drop()\n                    )\n\n        except Exception as e:\n            pass\n\n        return True\n\n    def parent(self):\n\n        node = self\n\n        try:\n\n            return GremlinFSVertex.fromMap(\n                self.g().V(\n                    node.get(\"id\")\n                ).outE(\n                    self.config(\"in_label\")\n                ).inV().valueMap(True).next()\n            )\n\n        except Exception as e:\n            # self.logger.exception(' GremlinFS: parent exception ', e)\n            return None\n\n    def parents(self, _list_ = []):\n\n        node = self\n\n        if not _list_:\n            _list_ = gfslist([])\n        else:\n            _list_ = gfslist(_list_)\n\n        parent = node.parent()\n        if parent and parent.get(\"id\") and parent.get(\"id\") != node.get(\"id\"):\n            _list_.append(parent)\n            return parent.parents(_list_.tolist())\n\n        return _list_.tolist()\n\n    def path(self):\n        return [ele for ele in reversed(self.parents([self]))]\n\n    def children(self):\n\n        node = self\n\n        if not node:\n            return GremlinFSVertex.fromMaps(\n                self.g().V().where(\n                    GremlinFS.operations().a().out(\n                        self.config(\"in_label\")\n                    ).count().is_(0)\n                ).valueMap(True).toList()\n            )\n\n        else:\n            return GremlinFSVertex.fromMaps(\n                self.g().V(\n                    node.get(\"id\")\n                ).inE(\n                    self.config(\"in_label\")\n                ).outV().valueMap(True).toList()\n            )\n\n        return []\n\n    def readFolderEntries(self):\n        return self.children()\n\n\n\nclass GremlinFSEdge(GremlinFSNode):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSEdge\")\n\n    @classmethod\n    def parse(self, id):\n\n        if not id:\n            return {}\n\n        # name@label\n        # ^(.+)\\@(.+)$\n        matcher = GremlinFS.operations().utils().rematch(\n            r\"^(.+)\\@(.+)$\",\n            id\n        )\n        if matcher:\n            nodenme = matcher.group(1)\n            nodelbl = matcher.group(2)\n            return {\n                \"name\": nodenme,\n                \"label\": nodelbl\n            }\n\n        # _default_ to label\n        return {\n            \"label\": id\n        }\n\n    @classmethod\n    def make(self, name, label, uuid = None):\n        return GremlinFSEdge(name = name, label = label, uuid = uuid)\n\n    @classmethod\n    def load(self, id):\n        clazz = self\n\n        parts = GremlinFSEdge.parse(id)\n        if parts and \\\n            \"uuid\" in parts and \\\n            \"name\" in parts and \\\n            \"label\" in parts:\n            try:\n                if parts[\"label\"] == \"vertex\":\n                    return GremlinFSEdge.fromE(\n                        GremlinFS.operations().g().E().has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n                else:\n                    return GremlinFSEdge.fromE(\n                        GremlinFS.operations().g().E().hasLabel(\n                            parts[\"label\"]\n                        ).has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif parts and \\\n            \"uuid\" in parts and \\\n            \"label\" in parts:\n            try:\n                if parts[\"label\"] == \"vertex\":\n                    return GremlinFSEdge.fromE(\n                        GremlinFS.operations().g().E().has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n                else:\n                    return GremlinFSEdge.fromE(\n                        GremlinFS.operations().g().E().hasLabel(\n                            parts[\"label\"]\n                        ).has(\n                            \"uuid\", parts[\"uuid\"]\n                        )\n                    )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        elif parts and \\\n            \"uuid\" in parts:\n            try:\n                return GremlinFSEdge.fromE(\n                    GremlinFS.operations().g().E().has(\n                        \"uuid\", parts[\"uuid\"]\n                    )\n                )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        # Fallback try as straigt up DB id\n        # OrientDB doesn't like invalid ID queries?\n        elif id and \":\" in id:\n            try:\n                return GremlinFSEdge.fromE(\n                    GremlinFS.operations().g().E(\n                        id\n                    )\n                )\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: edge from path ID exception ', e)\n                return None\n\n        return None\n\n    @classmethod\n    def fromMap(self, map):\n\n        # JS jump:\n        # UnsupportedSyntaxError: '**kwargs' syntax isn't supported\n        # return clazz(**vals)\n        node = GremlinFSEdge()\n        node.fromobj(map)\n\n        return node\n\n    @classmethod\n    def fromMaps(self, maps):\n        # clazz = self\n        nodes = gfslist([])\n\n        for map in maps:\n\n            # JS jump:\n            # UnsupportedSyntaxError: '**kwargs' syntax isn't supported\n            # list(nodes).append(clazz(**vals))\n            node = GremlinFSEdge()\n            node.fromobj(map)\n            nodes.append(node)\n\n        return nodes.tolist()\n\n    @classmethod\n    def fromE(self, e):\n        clazz = self\n        return GremlinFSEdge.fromMap(\n            e.valueMap(True).next()\n        )\n\n    @classmethod\n    def fromEs(self, es):\n        clazz = self\n        return GremlinFSEdge.fromMaps(\n            es.valueMap(True).toList()\n        )\n\n    def node(self, inv = True):\n\n        edge = self\n\n        if edge:\n\n            try:\n\n                if inv:\n                    return GremlinFSVertex.fromV(\n                        self.g().E(\n                            edge.get(\"id\")\n                        ).inV()\n                    )\n\n                else:\n                    return GremlinFSVertex.fromV(\n                        self.g().E(\n                            edge.get(\"id\")\n                        ).outV()\n                    )\n\n            except Exception as e:\n                # self.logger.exception(' GremlinFS: node exception ', e)\n                return None\n\n    def delete(self):\n\n        node = self\n\n        if not node:\n            return None\n\n        try:\n\n            self.g().E(\n                node.get(\"id\")\n            ).drop().next()\n\n        except Exception as e:\n            # self.logger.exception(' GremlinFS: delete exception ', e)\n            return False\n\n        return True\n\n\n\n# Decorator/Adapter pattern\nclass GremlinFSNodeWrapper(GremlinFSBase):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSNodeWrapper\")\n\n    def __init__(self, node):\n\n        # JS jump:\n        # ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n        super().__init__()\n\n        self.node = node\n\n    def __getattr__(self, attr):\n\n        node = self.node\n\n        try:\n\n            data = None\n\n            # file contents shortcut\n            if attr == \"content\" or attr == \"contents\":\n                data = node.render()\n                # if data:\n                #     data = self.utils().tobytes(data)\n\n            if data:\n                return data\n\n            edgenodes = None\n\n            if attr == \"inbound\":\n                edgenodes = node.inbound()\n\n            elif attr == \"outbound\":\n                edgenodes = node.outbound()\n\n            elif attr and attr.startswith(\"inbound__\"):\n                edgenodes = node.inbound( attr.replace(\"inbound__\", \"\") )\n\n            elif attr and attr.startswith(\"outbound__\"):\n                edgenodes = node.outbound( attr.replace(\"outbound__\", \"\") )\n\n            else:\n                edgenodes = node.outbound(attr)\n\n            if edgenodes:\n                if len(edgenodes) > 1:\n                    ret = gfslist([])\n                    for edgenode in edgenodes:\n                        ret.append(GremlinFSNodeWrapper(edgenode))\n                    return ret.tolist()\n                elif len(edgenodes) == 1:\n                    return GremlinFSNodeWrapper(edgenodes[0])\n\n        except Exception as e:\n            pass\n\n        return self.get(attr)\n\n    def all(self, prefix = None):\n\n        node = self.node\n\n        dsprefix = \"ds\"\n        if prefix:\n            dsprefix = \"ds.\" + prefix\n\n        existing = gfsmap({})\n        existing.update(node.all(prefix))\n\n        datasources = gfsmap({})\n        datasources.update(node.all(dsprefix))\n\n        props = gfsmap({})\n\n        for key in dict(existing):\n            if key and not key.startswith(\"ds.\"):\n                try:\n                    if key in datasources:\n                        ret, log, err = GremlinFS.operations().eval(\n                            datasources.get(key),\n                            self\n                        )\n                        if ret:\n                            # Mustache does not allow properties with '.' in the name\n                            # as '.' denotes field/object boundary. Therefore all mustache\n                            # given properties has to use '__' to indicated '.'\n                            # props[key.replace(\".\", \"__\")] = str(ret).strip()\n                            # TODO: Fix\n                            props[key] = str(ret) # .strip()\n                    # else:\n                    elif key in existing:\n                        value = existing.get(key)\n                        if value:\n                            # Mustache does not allow properties with '.' in the name\n                            # as '.' denotes field/object boundary. Therefore all mustache\n                            # given properties has to use '__' to indicated '.'\n                            # props[key.replace(\".\", \"__\")] = str(value).strip()\n                            # TODO: Fix\n                            props[key] = str(value) # .strip()\n                except Exception as e:\n                    self.logger.exception(' GremlinFS: all exception ', e)\n\n        return props.tomap()\n\n    def keys(self, prefix = None):\n        return self.all(prefix).keys()\n\n    def has(self, key, prefix = None):\n        pass\n\n    def set(self, key, value, prefix = None):\n        pass\n\n    def get(self, key, _default_ = None, prefix = None):\n\n        node = self.node\n\n        # Mustache does not allow properties with '.' in the name\n        # as '.' denotes field/object boundary. Therefore all mustache\n        # given properties has to use '__' to indicated '.'\n        key = key.replace(\"__\", \".\")\n\n        dsprefix = \"ds\"\n        if prefix:\n            dsprefix = \"ds.\" + prefix\n\n        existing = None\n        if node.has(key, prefix):\n            existing = node.get(key, _default_, prefix)\n\n        datasource = None\n        if node.has(key, dsprefix):\n            datasource = node.get(key, _default_, dsprefix)\n\n        prop = None\n\n        if datasource:\n            try:\n                ret, log, err = GremlinFS.operations().eval(\n                    datasource,\n                    self\n                )\n                if ret:\n                    # TODO: Fix\n                    prop = str(ret) # .strip()\n\n            except Exception as e:\n                self.logger.exception(' GremlinFS: get exception ', e)\n\n        else:\n            prop = existing\n\n        return prop\n\n    def property(self, name, _default_ = None, prefix = None):\n        pass\n\n\n\nclass GremlinFSUtils(GremlinFSBase):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSUtils\")\n\n    @classmethod\n    def missing(self, value):\n        if value:\n            raise GremlinFSExistsError()\n\n    @classmethod\n    def found(self, value):\n        if not value:\n            raise GremlinFSNotExistsError()\n        return value\n\n    @classmethod\n    def irepl(self, old, data, index = 0):\n\n        offset = index\n\n        if not old:\n            if data and index == 0:\n                return data\n            return None\n\n        if not data:\n            return old\n\n        if index < 0:\n            return old\n\n        if offset > len(old):\n            return old\n\n        _new_ = \"\"\n\n        prefix = \"\"\n        lprefix = 0\n\n        infix = data\n        linfix = len(data)\n\n        suffix = None\n        lsuffix = 0\n\n        # if not old and index\n\n        if offset > 0 and offset <= len(old):\n\n            prefix = old[:offset]\n            lprefix = len(prefix)\n\n        if len(old) > lprefix + linfix:\n\n            suffix = old[lprefix + linfix:]\n            lsuffix = len(old)\n\n        if lprefix > 0 and linfix > 0 and lsuffix > 0:\n            _new_ = prefix + infix + suffix\n        elif lprefix > 0 and linfix > 0:\n            _new_ = prefix + infix\n        elif linfix > 0 and lsuffix > 0:\n            _new_ = infix + suffix\n        else:\n            _new_ = infix\n\n        return _new_\n\n    @classmethod\n    def link(self, path):\n        pass\n\n    @classmethod\n    def utils(self):\n        return GremlinFSUtils()\n\n    def __init__(self, **kwargs):\n\n        # JS jump:\n        # ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n        super().__init__()\n\n        self.setall(kwargs)\n\n    # \n\n    def g(self):\n        return GremlinFS.operations().g()\n\n    def ro(self):\n        return GremlinFS.operations().ro()\n\n    def a(self):\n        return GremlinFS.operations().a()\n\n    def mq(self):\n        return GremlinFS.operations().mq()\n\n    def mqevent(self, event):\n        return GremlinFS.operations().mqevent(event)\n\n    def query(self, query, node = None, _default_ = None):\n        pass\n\n    def eval(self, command, node = None, _default_ = None):\n        pass\n\n    def config(self, key = None, _default_ = None):\n        return GremlinFS.operations().config(key, _default_)\n\n    # def utils(self):\n    #     return GremlinFS.operations().utils()\n\n    # \n\n    def nodelink(self, node, path = None):\n\n#         newpath = None\n# \n#         if node and path:\n#             newpath = self.linkpath(\"%s/.V/%s\" % (\n#                 path,\n#                 node.toid()\n#             ))\n#         elif node:\n#             newpath = self.linkpath(\"/.V/%s\" % (\n#                 node.toid()\n#             ))\n\n        nodepath = \"\"\n\n        if node:\n            path = node.path()\n            if path:\n                for node in path:\n                    nodename = node.get(\"name\", None)\n                    nodepath += \"/\" + nodename\n\n        return self.linkpath(nodepath)\n\n    def linkpath(self, path):\n\n        if not path:\n            return None\n\n        return self.config(\"mount_point\") + path\n\n    # \n\n    def tobytes(self, data):\n        return data\n\n    def tostring(self, data):\n        return data\n\n    def decode(self, data, encoding = \"base64\"):\n        return data\n\n    def encode(self, data, encoding = \"base64\"):\n        return data\n\n    def render(self, template, templatectx):\n        pass\n\n    def splitpath(self, path):\n        if path == \"/\":\n            return None\n        elif not \"/\" in path:\n            return [path]\n        elems = path.split(\"/\")\n        if elems[0] == \"\" and len(elems) > 1:\n            return elems[1:]\n        return elems\n\n    def rematch(self, pattern, data):\n        pass\n\n    def recompile(self, pattern):\n        pass\n\n    def genuuid(self, UUID = None):\n        pass\n\n    def gentime(self):\n        pass\n\n\n\nclass GremlinFSEvent(GremlinFSBase):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSEvent\")\n\n    def __init__(self, **kwargs):\n\n        # JS jump:\n        # ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n        super().__init__()\n\n        self.setall(kwargs)\n\n    def toJSON(self):\n\n        data = {\n           \"event\": self.get(\"event\")\n        }\n\n        if self.has(\"node\") and self.get(\"node\"):\n            data[\"node\"] = self.get(\"node\").all()\n\n        if self.has(\"link\") and self.get(\"link\"):\n            data[\"link\"] = self.get(\"link\").all()\n\n        if self.has(\"source\") and self.get(\"source\"):\n            data[\"source\"] = self.get(\"source\").all()\n\n        if self.has(\"target\") and self.get(\"target\"):\n            data[\"target\"] = self.get(\"target\").all()\n\n        return data\n        \n\n\nclass GremlinFSConfig(GremlinFSBase):\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFSConfig\")\n\n    @classmethod\n    def defaults(self):\n        return {\n            \"mount_point\": None,\n\n            \"gremlin_host\": None,\n            \"gremlin_port\": None,\n            \"gremlin_username\": None,\n            # \"gremlin_password\": None,\n            \"gremlin_url\": None,\n\n            \"rabbitmq_host\": None,\n            \"rabbitmq_port\": None,\n            # \"rabbitmq_username\": None,\n            \"rabbitmq_password\": None,\n\n            \"mq_exchange\": 'gfs-exchange',\n            \"mq_queue\": 'gfs-queue',\n\n            \"log_level\": GremlinFSLogger.getLogLevel(),\n\n            \"fs_ns\": \"gfs1\",\n            \"fs_root\": None,\n            \"fs_root_init\": False,\n\n            \"folder_label\": 'group',\n            \"ref_label\": 'ref',\n            \"in_label\": 'in',\n            \"self_label\": 'self',\n            \"template_label\": 'template',\n\n            \"in_name\": 'in0',\n            \"self_name\": 'self0',\n\n            \"vertex_folder\": '.V',\n            \"edge_folder\": '.E',\n            \"in_edge_folder\": 'IN', # 'EI',\n            \"out_edge_folder\": 'OUT', # 'EO',\n\n            \"uuid_property\": 'uuid',\n            \"name_property\": 'name',\n            \"data_property\": 'data',\n            \"template_property\": 'template',\n\n            \"default_uid\": 1001,\n            \"default_gid\": 1001,\n            \"default_mode\": 0o777,\n\n            \"labels\": []\n        }\n\n    def __init__(self, **kwargs):\n\n        # JS jump:\n        # ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n        super().__init__()\n\n        # Defaults\n        self.setall(GremlinFSConfig.defaults())\n\n        # Overrides\n        self.setall(kwargs)\n\n        # Build label regexes\n        if self.has(\"labels\"):\n            for label_config in self.get(\"labels\"):\n                if \"pattern\" in label_config:\n                    try:\n                        label_config[\"compiled\"] = re.compile(label_config[\"pattern\"])\n                    except Exception as e:\n                        self.logger.exception(' GremlinFS: failed to compile pattern ' + label_config[\"pattern\"], e)\n                    pass\n\n\n\nclass GremlinFS():\n\n    '''\n    This class should be subclassed and passed as an argument to FUSE on\n    initialization. All operations should raise a GremlinFSError exception on\n    error.\n\n    When in doubt of what an operation should do, check the FUSE header file\n    or the corresponding system call man page.\n    '''\n\n    logger = GremlinFSLogger.getLogger(\"GremlinFS\")\n\n    __instance = None\n\n    @classmethod\n    def instance(self, instance = None):\n        if instance:\n            GremlinFS.__instance = instance\n        return GremlinFS.__instance\n\n    @classmethod\n    def operations(self):\n        return GremlinFS.__instance\n\n    def __init__(\n        self,\n        **kwargs):\n\n        self._g = None\n        self._ro = None\n        self._mq = None\n\n        self._config = None\n\n    # def __init__(\n    def configure(\n        self,\n\n        mount_point,\n\n        gremlin_host,\n        gremlin_port,\n        gremlin_username,\n        gremlin_password,\n\n        rabbitmq_host = None,\n        rabbitmq_port = None,\n        rabbitmq_username = None,\n        rabbitmq_password = None,\n\n        **kwargs):\n\n        self.mount_point = mount_point\n\n        self.logger.info(' GremlinFS mount point: ' + self.mount_point)\n\n        self.gremlin_host = gremlin_host\n        self.gremlin_port = gremlin_port\n        self.gremlin_username = gremlin_username\n        self.gremlin_password = gremlin_password\n\n        self.gremlin_url = \"ws://\" + self.gremlin_host + \":\" + self.gremlin_port + \"/gremlin\"\n\n        self.logger.info(' GremlinFS gremlin host: ' + self.gremlin_host)\n        self.logger.info(' GremlinFS gremlin port: ' + self.gremlin_port)\n        self.logger.info(' GremlinFS gremlin username: ' + self.gremlin_username)\n        # self.logger.debug(' GremlinFS gremlin password: ' + self.gremlin_password)\n        self.logger.info(' GremlinFS gremlin URL: ' + self.gremlin_url)\n\n        self.rabbitmq_host = rabbitmq_host\n        self.rabbitmq_port = rabbitmq_port\n        self.rabbitmq_username = rabbitmq_username\n        self.rabbitmq_password = rabbitmq_password\n\n        self.logger.info(' GremlinFS rabbitmq host: ' + self.rabbitmq_host)\n        self.logger.info(' GremlinFS rabbitmq port: ' + self.rabbitmq_port)\n        self.logger.info(' GremlinFS rabbitmq username: ' + self.rabbitmq_username)\n        # self.logger.debug(' GremlinFS rabbitmq password: ' + self.rabbitmq_password)\n\n        self._g = None\n        self._ro = None\n        self._mq = None\n\n        self._config = GremlinFSConfig(\n\n            mount_point = mount_point,\n\n            gremlin_host = gremlin_host,\n            gremlin_port = gremlin_port,\n            gremlin_username = gremlin_username,\n            gremlin_password = gremlin_password,\n\n            rabbitmq_host = rabbitmq_host,\n            rabbitmq_port = rabbitmq_port,\n            rabbitmq_username = rabbitmq_username,\n            rabbitmq_password = rabbitmq_password\n\n        )\n\n        self._utils = GremlinFSUtils()\n\n        return self\n\n    def connection(self, ro = False):\n        pass\n\n    def mqconnection(self):\n        pass\n\n    def mqchannel(self):\n        pass\n\n    def g(self):\n        pass\n\n    def ro(self):\n        pass\n\n    def a(self):\n        pass\n\n    def mq(self):\n        pass\n\n    def mqevent(self, event):\n        pass\n\n    def mqonevent(self, node, event, chain = [], data = {}, propagate = True):\n        pass\n\n    def mqonmessage(self, ch, method, properties, body):\n        pass\n\n    def query(self, query, node = None, _default_ = None):\n        pass\n\n    def eval(self, command, node = None, _default_ = None):\n        pass\n\n    def config(self, key = None, _default_ = None):\n        return self._config.get(key, _default_)\n\n    def utils(self):\n        return self._utils\n\n    def getfs(self, fsroot, fsinit = False):\n        return fsroot\n\n    def defaultLabel(self):\n        return \"vertex\"\n\n    def defaultFolderLabel(self):\n        return self.config(\"folder_label\")\n\n    def isFileLabel(self, label):\n        if self.isFolderLabel(label):\n            return False\n        return True\n\n    def isFolderLabel(self, label):\n        if label == self.defaultFolderLabel():\n            return True\n        return False\n\n\n\n__all__ = [\n    'GremlinFSBase',\n    # 'GremlinFSMap',\n    'GremlinFSPath',\n    'GremlinFSNode',\n    'GremlinFSVertex',\n    'GremlinFSEdge',\n    'GremlinFSNodeWrapper',\n    'GremlinFSUtils',\n    'GremlinFSEvent',\n    'GremlinFSConfig',\n    'GremlinFS' \n]\n\n__default__ = 'GremlinFS'\n"]}