

http://stackoverflow.com/questions/2807034/is-it-easier-to-write-filesystem-drivers-in-userspace-than-in-kernel-space

If it used the FUSE API, it would be much easier to maintain, and the actual work that went into transforming ext3 into a copy on write file system would get more exposure. This also relates to in-kernel code that is gathering mold because nobody is brave enough (or bored enough) to touch it.


https://github.com/libfuse/libfuse

FUSE (Filesystem in Userspace) is an interface for userspace programs to export a filesystem to the Linux kernel. The FUSE project consists of two components: the fuse kernel module (maintained in the regular kernel repositories) and the libfuse userspace library (maintained in this repository). libfuse provides the reference implementation for communicating with the FUSE kernel module.
A FUSE file system is typically implemented as a standalone application that links with libfuse. libfuse provides functions to mount the file system, unmount it, read requests from the kernel, and send responses back. libfuse offers two APIs: a "high-level", synchronous API, and a "low-level" asynchronous API. In both cases, incoming requests from the kernel are passed to the main program using callbacks. When using the high-level API, the callbacks may work with file names and paths instead of inodes, and processing of a request finishes when the callback function returns. When using the low-level API, the callbacks must work with inodes and responses must be sent explicitly using a separate set of API functions.


